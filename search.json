[{"path":"https://eauleaf.github.io/crudr/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2021 crudr authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":[]},{"path":"https://eauleaf.github.io/crudr/articles/crudr.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"crudr","text":"package (create-read-update-delete) CRUD app built DT R. ’s Shiny interface users directly edit cells within presented datatable, syncing user computer, server, database happen immediately automatically background exit cell. idea behind crudr make easy centrally maintain single source centralized data time maintaining log changes allowing controlled distributed editing dataset keep continuously updated.","code":""},{"path":"https://eauleaf.github.io/crudr/articles/crudr.html","id":"a-common-problem","dir":"Articles","previous_headings":"Overview","what":"A Common Problem","title":"crudr","text":"Companies often different departments different spreadsheets track information. instance, let’s say bunch store locations company. Ideally, someone company updated information locations, e.g. store’s mailing address, phone number, email, manager, manager’s email, etc. companies, information actually resides lot different places datasets almost always errors managers move around, store leases expire, etc. , Sally might charge Locations, Jose knows Manager info, etc. need data correct, joined, posted, available everyone, time time, maintaining quality data hard . package helps solve distributed-data-maintenance distributed-data-availability problem.","code":""},{"path":"https://eauleaf.github.io/crudr/articles/crudr.html","id":"goals-for-crudr","dir":"Articles","previous_headings":"Overview","what":"Goals for crudr","title":"crudr","text":"goals crudr : Present data relational database DataTable Shiny app viewing management Separate data viewers data managers / administrators Make easy control admin users can update columns DB table Keep record changes made database table corresponding change log table Allow one simultaneous editor without crashes database agnostic","code":""},{"path":"https://eauleaf.github.io/crudr/articles/crudr.html","id":"other-notes","dir":"Articles","previous_headings":"Overview > Goals for crudr","what":"Other Notes","title":"crudr","text":"Crudr works synchronizing tables User’s Computer, Host Server, Database code built Shiny modules can manage present several tables app SQLite, Postgres, Snowflake databases tested database checks periodically whether admins made changes data; , UI server refresh love someone Posit improve code just take code make . ’d great people use app broadly since problem exists often, don’t know make really robust since ’m hobbyist.","code":""},{"path":"https://eauleaf.github.io/crudr/articles/crudr.html","id":"example-app","dir":"Articles","previous_headings":"Overview > Goals for crudr","what":"Example App","title":"crudr","text":"example minimal app. one connected Postgres database testing. crudr app","code":""},{"path":[]},{"path":"https://eauleaf.github.io/crudr/articles/crudr.html","id":"getting-started","dir":"Articles","previous_headings":"","what":"Getting Started","title":"crudr","text":"install crudr, run: Example built packages, might want install packages. Note: package ‘pool’ must updated version CRAN.","code":"remotes::install_github('eauleaf/crudr') install.packages(c(   'shiny',   'shinydashboard',   'tidyverse',   'lubridate',   'DT',   'pool',   'here' ))"},{"path":"https://eauleaf.github.io/crudr/articles/crudr.html","id":"crudr-functions","dir":"Articles","previous_headings":"Getting Started","what":"4 crudr functions","title":"crudr","text":"really 4 crudr functions need know: cdr_make_db_tbls(), cdr_manage_db_tbls(), cdr_deliver_admin_tbl(), & cdr_deliver_chg_log_tbl().","code":""},{"path":"https://eauleaf.github.io/crudr/articles/crudr.html","id":"cdr_make_db_tbls","dir":"Articles","previous_headings":"Getting Started > 4 crudr functions","what":"1) cdr_make_db_tbls()","title":"crudr","text":"function, cdr_make_db_tbls(), writes two tables database. hand function tibble pool connection, ’ll write table, well corresponding change tracking table, database. already main table database, problem. Run function inputs cdr_make_db_tbls() just create change tracking table. already tables, function doesn’t anything except write notes R console saying ’s going mess tables already exist. Note: crudr work, row table write must Unique ID ’s recorded character. don’t Unique ID key field table , cdr_make_db_tbls() initially writes table, function automatically make one named “UID”.","code":""},{"path":"https://eauleaf.github.io/crudr/articles/crudr.html","id":"example-for-cdr_make_db_tbls","dir":"Articles","previous_headings":"","what":"crudr","title":"crudr","text":"want create database machine called ‘test.db’, want put database table flower data called ‘iris’, ’d write: ’d call function connection table write. can find database looking default directory ::(). code join new column, ‘UID’, onto iris data push table test database. already created Unique ID key field table, just tell function name field cdr_make_db_tbls(con, iris, key_field = 'name_of_your_unique_id_field'). Okay, function written database new table called ‘iris’ second table called ‘iris_DELTAS’. table names case sensitive. can see tables function wrote running following: see printout: “iris” “iris_DELTAS”. two tables original table, ‘UID’ field, secondary table named similar first, ‘*_DELTAS’. ‘iris_DELTAS’ deltas table change log. change make primary table admin user interface, ’ll create , gets recorded deltas table. side note, want remove tables later, can : , just delete database ‘test.db’.","code":"con <- pool::dbPool(DBI::dbConnect(RSQLite::SQLite(), 'test.db')) cdr_make_db_tbls(con, iris) paste(pool::dbListTables(con), collapse = ', ') pool::dbRemoveTable(con,'iris') pool::dbRemoveTable(con,'iris_DELTAS')"},{"path":"https://eauleaf.github.io/crudr/articles/crudr.html","id":"cdr_manage_db_tbls","dir":"Articles","previous_headings":"Getting Started > 4 crudr functions","what":"2) cdr_manage_db_tbls()","title":"crudr","text":"function, cdr_manage_db_tbls(), workhorse package. remember one function, one. function handful arguments. minimum, tell function: name table . example case ’s, db_tbl_name = ‘iris’. field Unique ID. example case ’s, key_col = ‘UID’. database connection . example case ’s, conn_pool = con. ’s . arguments can change want control can update things administrator table, can just read function details later info. , cdr_manage_db_tbls() returns 1 table directly 2 tables invisibly. direct output table example app goes : iris_r_tbl, iris_r_tbl <- cdr_manage_db_tbls(). output reactive table, use variable acting like ’s function, .e. putting parentheses, ‘()’, variable name. , wanted select columns filter rows, ’d write, iris_r_tbl() %>% select(some_columns) %>% filter(some_rows), parentheses ‘iris_r_tbl’, otherwise works just like dataframe object. output table cdr_manage_db_tbls(), case named, iris_r_tbl() ; can whatever want . can send format like, change column names, filter , join something else, send ‘leaflet’ map…whatever. ’s output present masses. fact, don’t even capture output cdr_manage_db_tbls() don’t want .","code":""},{"path":"https://eauleaf.github.io/crudr/articles/crudr.html","id":"the-2-invisible-tables","dir":"Articles","previous_headings":"Getting Started","what":"The 2 Invisible Tables","title":"crudr","text":"However, 2 tables cdr_manage_db_tbls() returns invisibly pick functions cdr_deliver_admin_tbl() & cdr_deliver_chg_log_tbl(). tables functions return like direct output table. Rather, tables direct representations ’s database. Let’s look 2 functions.","code":""},{"path":"https://eauleaf.github.io/crudr/articles/crudr.html","id":"cdr_deliver_admin_tbl","dir":"Articles","previous_headings":"Getting Started > The 2 Invisible Tables","what":"3) cdr_deliver_admin_tbl()","title":"crudr","text":"function picks invisible administrator table already rendered DT object. table primary database table wrote test database ran cdr_make_db_tbls(), test case, cdr_deliver_admin_tbl('iris') deliver ‘iris’ data data curator. , whoever maintains primary dataset access admin table, person can make changes data held database via output Shiny. call cdr_deliver_admin_tbl('iris') UI portion Shiny. full example section named CRUDR Example Code.","code":""},{"path":"https://eauleaf.github.io/crudr/articles/crudr.html","id":"cdr_deliver_chg_log_tbl","dir":"Articles","previous_headings":"Getting Started > The 2 Invisible Tables","what":"4) cdr_deliver_chg_log_tbl()","title":"crudr","text":"function picks invisible history--changes table already rendered DT object. table ‘*_DELTAS’ database table wrote test database ran cdr_make_db_tbls(), test case, cdr_deliver_chg_log_tbl('iris') deliver change history changes data curators made table ‘iris’. , crudr records every change someone makes primary dataset within change-log table. don’t need much table. ’s just record administrator database table, made change. also call function UI portion Shiny. full example section named CRUDR Example Code. table empty right now, let’s change .","code":""},{"path":[]},{"path":"https://eauleaf.github.io/crudr/articles/crudr.html","id":"a-tiny-shiny-crud-app","dir":"Articles","previous_headings":"","what":"A Tiny Shiny CRUD App","title":"crudr","text":"manage database tables, let’s launch bare-bones shiny app. ’ll need single ‘crudr’ functions described , cdr_manage_db_tbls. code comes packages shiny, shinydashboard, DT. Copy code RStudio console, run , play data.","code":""},{"path":"https://eauleaf.github.io/crudr/articles/crudr.html","id":"crudr-example-code","dir":"Articles","previous_headings":"A Tiny Shiny CRUD App","what":"CRUDR Example Code","title":"crudr","text":"","code":"con <- pool::dbPool(DBI::dbConnect(RSQLite::SQLite(), 'test.db'))  crudr::cdr_make_db_tbls(con, iris)  header <- shinydashboard::dashboardHeader(title = 'Tiny CRUDR Example')  sidebar <- shinydashboard::dashboardSidebar(   shinydashboard::sidebarMenu(     id = 'tabs',     shinydashboard::menuItem(       text = \"Iris Data\",       startExpanded = TRUE,       shinydashboard::menuSubItem(\"Administrator Table\", tabName = \"datr_editable\", icon = shiny::icon('edit')),       shinydashboard::menuSubItem(\"Change Log\", tabName = \"datr_change_log\"),       shinydashboard::menuSubItem(\"Iris End User View\", tabName = \"datr_end_usr\")     )))  body <- shinydashboard::dashboardBody(   shinydashboard::tabItems(     shinydashboard::tabItem(tabName = \"datr_editable\", crudr::cdr_deliver_admin_tbl('iris')),     shinydashboard::tabItem(tabName = \"datr_change_log\", crudr::cdr_deliver_chg_log_tbl('iris')),     shinydashboard::tabItem(tabName = \"datr_end_usr\", DT::DTOutput('iris_db_data'))   ))  ui <- shinydashboard::dashboardPage(header, sidebar, body)   server <- function(input, output, session){    iris_r_tbl <- crudr::cdr_manage_db_tbls(    db_tbl_name = 'iris',     key_col = 'UID',     conn_pool = con,     session = session,     add_row_permission = T,     del_row_permission = T,     cell_edit_permission = T,     lock_fields = c()   )    output$iris_db_data <- DT::renderDT(     DT::formatDate(table   = DT::datatable(iris_r_tbl()),                    columns = c('WHEN_EDITED_LAST'),                    method  = 'toLocaleString')   )  }   shiny::shinyApp(ui, server)"},{"path":[]},{"path":"https://eauleaf.github.io/crudr/articles/crudr.html","id":"make-some-changes","dir":"Articles","previous_headings":"","what":"Make Some Changes","title":"crudr","text":"app , ’re admin. , go ahead make changes administrator table. Double-click cell press ‘F2’ enter edit mode, change data. app write change database, update change log table, write change-log data database, await next change. ‘Iris End User View’ corresponds iris_r_tbl() direct output server. Make direct output awesome, like add buttons dropping DT code: ’s pretty much . Close app. reopen calling app code . app load data database changes made data . want see crudr acts multiple admin users, open second app go back forth making data changes app. make change, crudr checks anyone else made change refreshes .","code":"DT::datatable(iris_r_tbl(),                extensions = 'Buttons',                options = list(dom = 'tB', buttons = c('copy', 'csv', 'excel','pdf')))"},{"path":"https://eauleaf.github.io/crudr/articles/crudr.html","id":"user-control-changes","dir":"Articles","previous_headings":"Make Some Changes","what":"User Control Changes","title":"crudr","text":"want set admin permissions specific people, can shiny server code like : pass ‘okay_to_change’ variable cdr_manage_db_tbls() permission argument(s) like ‘cell_edit_permission = okay_to_change’ ‘add_row_permission = okay_to_change’. FALSE parameters makes admin table just another table typical user opens , whoever signs ‘.name’ can change data database everyone else sees. Alternatively, just write code present certain users tables cdr_deliver_admin_tbl() cdr_deliver_chg_log_tbl() UI, ’s .","code":"user <- ifelse(is.null(session$user), Sys.info()[['user']], session$user)  if (user == 'your.name'){   okay_to_change = T } else {   okay_to_change = F }"},{"path":"https://eauleaf.github.io/crudr/articles/crudr.html","id":"other-useful-info","dir":"Articles","previous_headings":"Make Some Changes","what":"Other Useful Info","title":"crudr","text":"Postgres database connection, can use pool connection RPostgreSQL::PostgreSQL(), RPostgres::Postgres() also works fine–just don’t wrap pool::dbPool().  Example Postgres connection strings . RPostgreSQL::PostgreSQL(): RPostgres::Postgres(): close database connection, run: pool::poolClose(con) DBI::dbDisconnect(con)","code":"con = pool::dbPool(            DBI::dbConnect(               drv = RPostgreSQL::PostgreSQL(),              dbname = \"test\",              host = \"localhost\",              port = \"5432\",              user = your_dsn_uid,              password = your_dsn_pwd            ) ) con <- DBI::dbConnect(   drv = RPostgres::Postgres(),   dbname = \"test\",   host = \"localhost\",   user = your_dsn_uid,   password = your_dsn_pwd   )"},{"path":"https://eauleaf.github.io/crudr/articles/crudr.html","id":"possible-future-improvements","dir":"Articles","previous_headings":"Make Some Changes","what":"Possible Future Improvements","title":"crudr","text":"quite things make crudr better. Maybe ’ll get sometime. Support databases, like sqlserver, oracle, etc. 2 admin users making concurrent changes, update just specific elements person changed rather refreshing whole table. Create function “cdr_reconstruct_past_tbl(as_of = ‘prior Sys.time()’)”, hand datetime function function returns tibble database admin table particular point time. Figure push data database asynchronously. Write bunch tests functions. Maybe add row lockout controls.","code":""},{"path":"https://eauleaf.github.io/crudr/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"eau leaf. Author, maintainer. beevabeeva. Contributor.","code":""},{"path":"https://eauleaf.github.io/crudr/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"leaf e (2023). crudr: Simplifies CRUD tasks including tracking changes db table. R package version 0.0.1.30, https://eauleaf.github.io/crudr/.","code":"@Manual{,   title = {crudr: Simplifies CRUD tasks including tracking changes of a db table},   author = {eau leaf},   year = {2023},   note = {R package version 0.0.1.30},   url = {https://eauleaf.github.io/crudr/}, }"},{"path":"https://eauleaf.github.io/crudr/index.html","id":"crudr","dir":"","previous_headings":"","what":"Simplifies CRUD tasks including tracking changes of a db table","title":"Simplifies CRUD tasks including tracking changes of a db table","text":"goal crudr simplify crud app works Shiny DT, maintains corresponding change tracking table within database. crudr just one function: cdr_manage_db_tbls()","code":""},{"path":"https://eauleaf.github.io/crudr/index.html","id":"try-it-out","dir":"","previous_headings":"","what":"Try it out","title":"Simplifies CRUD tasks including tracking changes of a db table","text":"crudr still development available CRAN yet, works pretty well databases: sqlite, postgres, snowflake. can install development version crudr Github running:","code":"remotes::install_github(\"eauleaf/crudr\")"},{"path":"https://eauleaf.github.io/crudr/reference/cdr_DB2RT_chg_log.html","id":null,"dir":"Reference","previous_headings":"","what":"Download database change log and send it to the module server — cdr_DB2RT_chg_log","title":"Download database change log and send it to the module server — cdr_DB2RT_chg_log","text":"Download database change log send module server","code":""},{"path":"https://eauleaf.github.io/crudr/reference/cdr_DB2RT_chg_log.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download database change log and send it to the module server — cdr_DB2RT_chg_log","text":"","code":"cdr_DB2RT_chg_log(conn_pool, chg_log_tbl_name)"},{"path":"https://eauleaf.github.io/crudr/reference/cdr_DB2RT_chg_log.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download database change log and send it to the module server — cdr_DB2RT_chg_log","text":"conn_pool pool connection object package 'pool' chg_log_tbl_name string: name database table managing suffix \"_DELTAS\"","code":""},{"path":"https://eauleaf.github.io/crudr/reference/cdr_DB2RT_chg_log.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Download database change log and send it to the module server — cdr_DB2RT_chg_log","text":"DT object present change log table","code":""},{"path":"https://eauleaf.github.io/crudr/reference/cdr_DB2RT_chg_log.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Download database change log and send it to the module server — cdr_DB2RT_chg_log","text":"","code":"if (FALSE) { con <- pool::dbPool(DBI::dbConnect(RSQLite::SQLite(), 'iris.db')) cdr_make_db_tbls(con, iris) cdr_DB2RT_primary(con, 'iris_DELTAS') pool::dbRemoveTable(con,'iris') pool::dbRemoveTable(con,'iris_DELTAS') pool::poolClose(con) }"},{"path":"https://eauleaf.github.io/crudr/reference/cdr_DB2RT_primary.html","id":null,"dir":"Reference","previous_headings":"","what":"Download database table and sync it to user interface — cdr_DB2RT_primary","title":"Download database table and sync it to user interface — cdr_DB2RT_primary","text":"Download database table sync user interface","code":""},{"path":"https://eauleaf.github.io/crudr/reference/cdr_DB2RT_primary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download database table and sync it to user interface — cdr_DB2RT_primary","text":"","code":"cdr_DB2RT_primary(conn_pool, db_tbl_name, key_col)"},{"path":"https://eauleaf.github.io/crudr/reference/cdr_DB2RT_primary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download database table and sync it to user interface — cdr_DB2RT_primary","text":"conn_pool pool connection object package 'pool' db_tbl_name string: name specific table update cdr_id() object key_col string: field contains unique ID key row","code":""},{"path":"https://eauleaf.github.io/crudr/reference/cdr_DB2RT_primary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Download database table and sync it to user interface — cdr_DB2RT_primary","text":"DT object present primary table","code":""},{"path":"https://eauleaf.github.io/crudr/reference/cdr_DB2RT_primary.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Download database table and sync it to user interface — cdr_DB2RT_primary","text":"","code":"if (FALSE) { con <- pool::dbPool(DBI::dbConnect(RSQLite::SQLite(), 'iris.db')) cdr_make_db_tbls(con, iris) cdr_DB2RT_primary(con, 'iris') pool::dbRemoveTable(con,'iris') pool::dbRemoveTable(con,'iris_DELTAS') pool::poolClose(con) }"},{"path":"https://eauleaf.github.io/crudr/reference/cdr_RT2DT_chg_log.html","id":null,"dir":"Reference","previous_headings":"","what":"Format the change log R table into a DT — cdr_RT2DT_chg_log","title":"Format the change log R table into a DT — cdr_RT2DT_chg_log","text":"Format change log R table DT","code":""},{"path":"https://eauleaf.github.io/crudr/reference/cdr_RT2DT_chg_log.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format the change log R table into a DT — cdr_RT2DT_chg_log","text":"","code":"cdr_RT2DT_chg_log(chg_log_tbl)"},{"path":"https://eauleaf.github.io/crudr/reference/cdr_RT2DT_chg_log.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format the change log R table into a DT — cdr_RT2DT_chg_log","text":"chg_log_tbl change log table imparted DB","code":""},{"path":"https://eauleaf.github.io/crudr/reference/cdr_RT2DT_chg_log.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format the change log R table into a DT — cdr_RT2DT_chg_log","text":"DT object","code":""},{"path":"https://eauleaf.github.io/crudr/reference/cdr_RT2DT_chg_log.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Format the change log R table into a DT — cdr_RT2DT_chg_log","text":"","code":"if (FALSE) { crudr:::cdr_RT2DT_chg_log(iris) }"},{"path":"https://eauleaf.github.io/crudr/reference/cdr_RT2DT_primary.html","id":null,"dir":"Reference","previous_headings":"","what":"Format the primary R table into a DT — cdr_RT2DT_primary","title":"Format the primary R table into a DT — cdr_RT2DT_primary","text":"Format primary R table DT","code":""},{"path":"https://eauleaf.github.io/crudr/reference/cdr_RT2DT_primary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format the primary R table into a DT — cdr_RT2DT_primary","text":"","code":"cdr_RT2DT_primary(db_tbl, cell_edit_permission, lock_fields = c())"},{"path":"https://eauleaf.github.io/crudr/reference/cdr_RT2DT_primary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format the primary R table into a DT — cdr_RT2DT_primary","text":"db_tbl change log table imparted DB cell_edit_permission bool: want allow admin table cells edited lock_fields strings: column names want lock e.g. c('Species','Petal.Width')","code":""},{"path":"https://eauleaf.github.io/crudr/reference/cdr_RT2DT_primary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format the primary R table into a DT — cdr_RT2DT_primary","text":"DT object present primary table","code":""},{"path":"https://eauleaf.github.io/crudr/reference/cdr_RT2DT_primary.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Format the primary R table into a DT — cdr_RT2DT_primary","text":"","code":"if (FALSE) { crudr:::cdr_RT2DT_primary(iris, cell_edit_permission = T) }"},{"path":"https://eauleaf.github.io/crudr/reference/cdr_adj_timezone.html","id":null,"dir":"Reference","previous_headings":"","what":"Provides an equivalent R timezone for the DB timezone — cdr_adj_timezone","title":"Provides an equivalent R timezone for the DB timezone — cdr_adj_timezone","text":"Translates Postgres, Sqlite, Snowflake & R  timezones adjust timezone treatment different databases","code":""},{"path":"https://eauleaf.github.io/crudr/reference/cdr_adj_timezone.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Provides an equivalent R timezone for the DB timezone — cdr_adj_timezone","text":"","code":"cdr_adj_timezone(conn_pool)"},{"path":"https://eauleaf.github.io/crudr/reference/cdr_adj_timezone.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Provides an equivalent R timezone for the DB timezone — cdr_adj_timezone","text":"conn_pool database connection type pool","code":""},{"path":"https://eauleaf.github.io/crudr/reference/cdr_adj_timezone.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Provides an equivalent R timezone for the DB timezone — cdr_adj_timezone","text":"OlsonNames() timezone R lubridate","code":""},{"path":"https://eauleaf.github.io/crudr/reference/cdr_adj_timezone.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Provides an equivalent R timezone for the DB timezone — cdr_adj_timezone","text":"Postgres timezone ref: 'https://www.postgresql.org/docs/8.1/datetime-keywords.html' Snowflake always: 'UTC' Sqlite always empty string: \"\" ('UTC')","code":""},{"path":"https://eauleaf.github.io/crudr/reference/cdr_adj_timezone.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Provides an equivalent R timezone for the DB timezone — cdr_adj_timezone","text":"","code":"if (FALSE) { conn_pool <- pool::dbPool(   DBI::dbConnect( RPostgreSQL::PostgreSQL(),                   dbname = \"test\",                   host = \"localhost\",                   port = \"5432\",                   user = Sys.getenv('postgres_username'),                   password = Sys.getenv('postgres_password')) ) crudr:::cdr_adj_timezone(conn_pool) pool::poolClose(conn_pool) }"},{"path":"https://eauleaf.github.io/crudr/reference/cdr_admin_key_ui.html","id":null,"dir":"Reference","previous_headings":"","what":"Interface buttons for row additions and/or row deletions in the admin table — cdr_admin_key_ui","title":"Interface buttons for row additions and/or row deletions in the admin table — cdr_admin_key_ui","text":"User interface portion server module Unique ID input textbox button button UI shows primary table cell_edit_permission set T server","code":""},{"path":"https://eauleaf.github.io/crudr/reference/cdr_admin_key_ui.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Interface buttons for row additions and/or row deletions in the admin table — cdr_admin_key_ui","text":"","code":"cdr_admin_key_ui(id)"},{"path":"https://eauleaf.github.io/crudr/reference/cdr_admin_key_ui.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Interface buttons for row additions and/or row deletions in the admin table — cdr_admin_key_ui","text":"id table name - namespace ID corresponding 'primary_tbl_name' database","code":""},{"path":"https://eauleaf.github.io/crudr/reference/cdr_admin_key_ui.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Interface buttons for row additions and/or row deletions in the admin table — cdr_admin_key_ui","text":"html (called cdr_deliver_admin_tbl())","code":""},{"path":"https://eauleaf.github.io/crudr/reference/cdr_admin_key_ui.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Interface buttons for row additions and/or row deletions in the admin table — cdr_admin_key_ui","text":"","code":"if (FALSE) { ui_html <- shiny::fluidPage(crudr:::cdr_admin_key_ui('primary_table_name')) }"},{"path":"https://eauleaf.github.io/crudr/reference/cdr_admin_tbl_ui.html","id":null,"dir":"Reference","previous_headings":"","what":"HTML to output a DT from the Server module — cdr_admin_tbl_ui","title":"HTML to output a DT from the Server module — cdr_admin_tbl_ui","text":"DT output namespace","code":""},{"path":"https://eauleaf.github.io/crudr/reference/cdr_admin_tbl_ui.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"HTML to output a DT from the Server module — cdr_admin_tbl_ui","text":"","code":"cdr_admin_tbl_ui(id, tbl = \"db_tbl\")"},{"path":"https://eauleaf.github.io/crudr/reference/cdr_admin_tbl_ui.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"HTML to output a DT from the Server module — cdr_admin_tbl_ui","text":"id primary table name - namespace ID matches table name primary table administered database tbl one 'db_tbl' 'chg_log_tbl' depending table server module want present","code":""},{"path":"https://eauleaf.github.io/crudr/reference/cdr_admin_tbl_ui.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"HTML to output a DT from the Server module — cdr_admin_tbl_ui","text":"DTOutput table loading spinner","code":""},{"path":"https://eauleaf.github.io/crudr/reference/cdr_admin_tbl_ui.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"HTML to output a DT from the Server module — cdr_admin_tbl_ui","text":"","code":"ui_html <- shiny::fluidPage(crudr:::cdr_admin_tbl_ui('iris', 'db_tbl'))"},{"path":"https://eauleaf.github.io/crudr/reference/cdr_append_tbl.html","id":null,"dir":"Reference","previous_headings":"","what":"Appends data from a dataframe into an existing database table — cdr_append_tbl","title":"Appends data from a dataframe into an existing database table — cdr_append_tbl","text":"Requires dataframe database table structure","code":""},{"path":"https://eauleaf.github.io/crudr/reference/cdr_append_tbl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Appends data from a dataframe into an existing database table — cdr_append_tbl","text":"","code":"cdr_append_tbl(db_tbl, conn_pool, db_tbl_name = NULL, chunk_size = NULL, ...)"},{"path":"https://eauleaf.github.io/crudr/reference/cdr_append_tbl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Appends data from a dataframe into an existing database table — cdr_append_tbl","text":"db_tbl dataframe append database table conn_pool database connection class pool DBI db_tbl_name name database table different name dataframe passed 'db_tbl'; can alternatively accept DBI::Id() object chunk_size maximum number cells want pass DB one go (.e. dataframe 100 columns 10,000 rows, chunk_size 1000 elements split dataframe 1000 SQL query groups append group successively. Default estimate number cells makes ~1,000,000 bytes.) ... args specifying DB table schema = 'my_schema'","code":""},{"path":"https://eauleaf.github.io/crudr/reference/cdr_append_tbl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Appends data from a dataframe into an existing database table — cdr_append_tbl","text":"invisibly returns SQL INSERT statements","code":""},{"path":"https://eauleaf.github.io/crudr/reference/cdr_append_tbl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Appends data from a dataframe into an existing database table — cdr_append_tbl","text":"","code":"if (FALSE) {  con <- pool::dbPool(DBI::dbConnect(RSQLite::SQLite(), 'test.db')) example_tbl <- dplyr::mutate(iris, bool = Species == 'setosa', day = Sys.Date(), test = Sys.time()) pool::dbCreateTable(con, 'example_tbl', example_tbl) cdr_append_tbl(example_tbl, con) dplyr::tbl(con, 'example_tbl') pool::dbRemoveTable(con,'example_tbl') pool::poolClose(con)  }"},{"path":"https://eauleaf.github.io/crudr/reference/cdr_attach_activity.html","id":null,"dir":"Reference","previous_headings":"","what":"Determine the type of changes for the user change-log — cdr_attach_activity","title":"Determine the type of changes for the user change-log — cdr_attach_activity","text":"Attach column data change-log describing type change user made. See: cdr_label_chg_log_activity()","code":""},{"path":"https://eauleaf.github.io/crudr/reference/cdr_attach_activity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Determine the type of changes for the user change-log — cdr_attach_activity","text":"","code":"cdr_attach_activity(chg_log, key_field = \"UID\")"},{"path":"https://eauleaf.github.io/crudr/reference/cdr_attach_activity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Determine the type of changes for the user change-log — cdr_attach_activity","text":"chg_log change-log tibble pulled DB key_field field primary table contains unique-ID observation","code":""},{"path":"https://eauleaf.github.io/crudr/reference/cdr_attach_activity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Determine the type of changes for the user change-log — cdr_attach_activity","text":"change-log tibble activity type attached","code":""},{"path":"https://eauleaf.github.io/crudr/reference/cdr_attach_activity.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Determine the type of changes for the user change-log — cdr_attach_activity","text":"","code":"if (FALSE)  cdr_attach_activity(chg_log, 'UID')"},{"path":"https://eauleaf.github.io/crudr/reference/cdr_chk_uniq_id.html","id":null,"dir":"Reference","previous_headings":"","what":"Checks availability of unique ID in DB — cdr_chk_uniq_id","title":"Checks availability of unique ID in DB — cdr_chk_uniq_id","text":"user create delete new row observation, ID unique ID column must already used. Function checks user requested unique ID already DB.","code":""},{"path":"https://eauleaf.github.io/crudr/reference/cdr_chk_uniq_id.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Checks availability of unique ID in DB — cdr_chk_uniq_id","text":"","code":"cdr_chk_uniq_id(db_tbl, input_uid, key_column, chk_for = c(\"create\", \"delete\"))"},{"path":"https://eauleaf.github.io/crudr/reference/cdr_chk_uniq_id.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Checks availability of unique ID in DB — cdr_chk_uniq_id","text":"db_tbl tibble object: primary table server memory input_uid char string: unique ID like add/remove observation creating/deleting key_column char string: describes column field UID chk_for one 'create' 'delete': describing whether user wants make new UID delete row denoted UID. Create checking slightly restrictive capital insensitive.","code":""},{"path":"https://eauleaf.github.io/crudr/reference/cdr_chk_uniq_id.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Checks availability of unique ID in DB — cdr_chk_uniq_id","text":"text display UI","code":""},{"path":"https://eauleaf.github.io/crudr/reference/cdr_chunk_tbl.html","id":null,"dir":"Reference","previous_headings":"","what":"break a dataframe into a list of dataframes — cdr_chunk_tbl","title":"break a dataframe into a list of dataframes — cdr_chunk_tbl","text":"number dataframes list based number elements specified chunk.","code":""},{"path":"https://eauleaf.github.io/crudr/reference/cdr_chunk_tbl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"break a dataframe into a list of dataframes — cdr_chunk_tbl","text":"","code":"cdr_chunk_tbl(db_tbl, chunk_size = 10000)"},{"path":"https://eauleaf.github.io/crudr/reference/cdr_chunk_tbl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"break a dataframe into a list of dataframes — cdr_chunk_tbl","text":"db_tbl dataframe chunk_size number table elements put chunk","code":""},{"path":"https://eauleaf.github.io/crudr/reference/cdr_chunk_tbl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"break a dataframe into a list of dataframes — cdr_chunk_tbl","text":"list dataframes","code":""},{"path":"https://eauleaf.github.io/crudr/reference/cdr_chunk_tbl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"break a dataframe into a list of dataframes — cdr_chunk_tbl","text":"","code":"chunked_df <- crudr:::cdr_chunk_tbl(iris, 20) chunked_df <- crudr:::cdr_chunk_tbl(iris, 1) chunked_df <- crudr:::cdr_chunk_tbl(iris, -1) chunked_df <- crudr:::cdr_chunk_tbl(iris, 500) chunked_df <- crudr:::cdr_chunk_tbl(iris, 1000) chunked_df <- crudr:::cdr_chunk_tbl(as.matrix(iris), 0) chunked_df <- crudr:::cdr_chunk_tbl(mtcars, 100)"},{"path":"https://eauleaf.github.io/crudr/reference/cdr_coerce_value.html","id":null,"dir":"Reference","previous_headings":"","what":"Change cell value using DT::coerceValue() — cdr_coerce_value","title":"Change cell value using DT::coerceValue() — cdr_coerce_value","text":"Change cell value using DT::coerceValue()","code":""},{"path":"https://eauleaf.github.io/crudr/reference/cdr_coerce_value.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Change cell value using DT::coerceValue() — cdr_coerce_value","text":"","code":"cdr_coerce_value(input_val, old_mem_val)"},{"path":"https://eauleaf.github.io/crudr/reference/cdr_coerce_value.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Change cell value using DT::coerceValue() — cdr_coerce_value","text":"input_val cell_edit value old_mem_val type database table","code":""},{"path":"https://eauleaf.github.io/crudr/reference/cdr_coerce_value.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Change cell value using DT::coerceValue() — cdr_coerce_value","text":"input_val value coerced correct df_tbl value","code":""},{"path":"https://eauleaf.github.io/crudr/reference/cdr_coerce_value.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Change cell value using DT::coerceValue() — cdr_coerce_value","text":"","code":"if (FALSE) { cdr_coerce_value(c('2023-03-17', '2023-03-17T14:28:24Z'), lubridate::now()) input_val <- c('true','t','truthy','tri',1,0,5,-5,'false','bla bla bla','a',' ','', 'na','none','no', 'yes', 'off', 'on', 'no', 'f','F','T', 'NO') purrr::set_names(purrr::map(input_val, ~cdr_coerce_value(., TRUE)), input_val) }"},{"path":"https://eauleaf.github.io/crudr/reference/cdr_create_row_in_db.html","id":null,"dir":"Reference","previous_headings":"","what":"Appends new row to primary table — cdr_create_row_in_db","title":"Appends new row to primary table — cdr_create_row_in_db","text":"Create new observation line primary database table insert unique ID unique observation identifier line. Note: function primary table. used chg_log table. Note2: Function clean control 'new_uid' inputs. Run controls code passing 'new_uid'","code":""},{"path":"https://eauleaf.github.io/crudr/reference/cdr_create_row_in_db.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Appends new row to primary table — cdr_create_row_in_db","text":"","code":"cdr_create_row_in_db(conn_pool, db_tbl_name, key_col, input_uid)"},{"path":"https://eauleaf.github.io/crudr/reference/cdr_create_row_in_db.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Appends new row to primary table — cdr_create_row_in_db","text":"conn_pool pool object pool connections specific db db_tbl_name string: name specific table update, cdr_id() object key_col name unique ID column db table (table must unique ID column unique IDs) input_uid char string: new unique ID like use new observation creating","code":""},{"path":"https://eauleaf.github.io/crudr/reference/cdr_delete_row_in_db.html","id":null,"dir":"Reference","previous_headings":"","what":"Removes specified row from db table — cdr_delete_row_in_db","title":"Removes specified row from db table — cdr_delete_row_in_db","text":"Deletes row rows specifying unique ids rows delete Note: implemented UI button, administrator use","code":""},{"path":"https://eauleaf.github.io/crudr/reference/cdr_delete_row_in_db.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Removes specified row from db table — cdr_delete_row_in_db","text":"","code":"cdr_delete_row_in_db(   conn_pool = conn_pool,   db_tbl_name = NULL,   value_rowuid = NULL,   key_column = NULL )"},{"path":"https://eauleaf.github.io/crudr/reference/cdr_delete_row_in_db.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Removes specified row from db table — cdr_delete_row_in_db","text":"conn_pool pool connection object: pool connections established session db_tbl_name string: name specific database table, cdr_id() object value_rowuid number string: specific unique ID corresponds row delete key_column string: name column unique ID","code":""},{"path":"https://eauleaf.github.io/crudr/reference/cdr_delete_row_in_db.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Removes specified row from db table — cdr_delete_row_in_db","text":"TRUE successful deletion","code":""},{"path":"https://eauleaf.github.io/crudr/reference/cdr_delete_row_in_db.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Removes specified row from db table — cdr_delete_row_in_db","text":"","code":"if (FALSE) { con <- pool::dbPool(DBI::dbConnect(RSQLite::SQLite(), 'iris.db')) iris <- dplyr::mutate(iris, unique_id = paste0('uid_',dplyr::row_number())) cdr_make_db_tbls(conn_pool = con, db_tbl = iris) print(here::here('iris.db')) cdr_delete_row_in_db(   conn_pool = con,   db_tbl_name = 'iris', #'iris_deltas'   value_rowuid = 'uid_1',   key_column = 'unique_id'   ) pool::poolClose(con) }"},{"path":"https://eauleaf.github.io/crudr/reference/cdr_deliver_admin_tbl.html","id":null,"dir":"Reference","previous_headings":"","what":"Shiny UI HTML for the administrator table and — cdr_deliver_admin_tbl","title":"Shiny UI HTML for the administrator table and — cdr_deliver_admin_tbl","text":"Shiny UI HTML administrator table ","code":""},{"path":"https://eauleaf.github.io/crudr/reference/cdr_deliver_admin_tbl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Shiny UI HTML for the administrator table and — cdr_deliver_admin_tbl","text":"","code":"cdr_deliver_admin_tbl(db_tbl_name = \"\")"},{"path":"https://eauleaf.github.io/crudr/reference/cdr_deliver_admin_tbl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Shiny UI HTML for the administrator table and — cdr_deliver_admin_tbl","text":"db_tbl_name string: name primary database table managed (namespace id)","code":""},{"path":"https://eauleaf.github.io/crudr/reference/cdr_deliver_admin_tbl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Shiny UI HTML for the administrator table and — cdr_deliver_admin_tbl","text":"rendered Datatable interface","code":""},{"path":"https://eauleaf.github.io/crudr/reference/cdr_deliver_admin_tbl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Shiny UI HTML for the administrator table and — cdr_deliver_admin_tbl","text":"","code":"ui_html <- cdr_deliver_admin_tbl('iris')"},{"path":"https://eauleaf.github.io/crudr/reference/cdr_deliver_chg_log_tbl.html","id":null,"dir":"Reference","previous_headings":"","what":"Gets the the change history table in the Shiny UI — cdr_deliver_chg_log_tbl","title":"Gets the the change history table in the Shiny UI — cdr_deliver_chg_log_tbl","text":"Gets change history table Shiny UI","code":""},{"path":"https://eauleaf.github.io/crudr/reference/cdr_deliver_chg_log_tbl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gets the the change history table in the Shiny UI — cdr_deliver_chg_log_tbl","text":"","code":"cdr_deliver_chg_log_tbl(db_tbl_name = \"\")"},{"path":"https://eauleaf.github.io/crudr/reference/cdr_deliver_chg_log_tbl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Gets the the change history table in the Shiny UI — cdr_deliver_chg_log_tbl","text":"db_tbl_name string: name primary database table managed","code":""},{"path":"https://eauleaf.github.io/crudr/reference/cdr_deliver_chg_log_tbl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Gets the the change history table in the Shiny UI — cdr_deliver_chg_log_tbl","text":"rendered Datatable interface","code":""},{"path":"https://eauleaf.github.io/crudr/reference/cdr_deliver_chg_log_tbl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Gets the the change history table in the Shiny UI — cdr_deliver_chg_log_tbl","text":"","code":"cdr_deliver_chg_log_tbl('iris') #> <div class=\"shiny-spinner-output-container shiny-spinner-hideui \"> #>   <div class=\"load-container shiny-spinner-hidden load1\"> #>     <div id=\"spinner-097b487ee5a8ea35b636386b447cb9be\" class=\"loader\">Loading...<\/div> #>   <\/div> #>   <div style=\"height:400px\" class=\"shiny-spinner-placeholder\"><\/div> #>   <div class=\"datatables html-widget html-widget-output shiny-report-size html-fill-item\" id=\"iris-chg_log_tbl\" style=\"width:100%;height:auto;\"><\/div> #> <\/div>"},{"path":"https://eauleaf.github.io/crudr/reference/cdr_id.html","id":null,"dir":"Reference","previous_headings":"","what":"A drop-in replacement for DBI::Id(), but with ordered output — cdr_id","title":"A drop-in replacement for DBI::Id(), but with ordered output — cdr_id","text":"drop-replacement DBI::Id(), ordered output","code":""},{"path":"https://eauleaf.github.io/crudr/reference/cdr_id.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A drop-in replacement for DBI::Id(), but with ordered output — cdr_id","text":"","code":"cdr_id(...)"},{"path":"https://eauleaf.github.io/crudr/reference/cdr_id.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A drop-in replacement for DBI::Id(), but with ordered output — cdr_id","text":"... DB table index parameters, .e. strings labels table, schema, catalog, cluster, database","code":""},{"path":"https://eauleaf.github.io/crudr/reference/cdr_id.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A drop-in replacement for DBI::Id(), but with ordered output — cdr_id","text":"equivalent DBI::Id() object","code":""},{"path":"https://eauleaf.github.io/crudr/reference/cdr_id.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A drop-in replacement for DBI::Id(), but with ordered output — cdr_id","text":"","code":"cdr_id(table = 'my_table', schema = 'a_schema', some_new_spec = 'in_case_you_need_it') #> <Id> schema = a_schema, some_new_spec = in_case_you_need_it, table = my_table cdr_id(table = 'table_last', schema = 'schema_3rd', cluster = 'clus_1st', catalog = 'cat_2nd') #> <Id> cluster = clus_1st, catalog = cat_2nd, schema = schema_3rd, table = table_last"},{"path":"https://eauleaf.github.io/crudr/reference/cdr_id2sql.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a name or DBI::Id to SQL — cdr_id2sql","title":"Convert a name or DBI::Id to SQL — cdr_id2sql","text":"Convert name DBI::Id SQL","code":""},{"path":"https://eauleaf.github.io/crudr/reference/cdr_id2sql.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a name or DBI::Id to SQL — cdr_id2sql","text":"","code":"cdr_id2sql(db_tbl_name, ...)"},{"path":"https://eauleaf.github.io/crudr/reference/cdr_id2sql.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a name or DBI::Id to SQL — cdr_id2sql","text":"db_tbl_name db name text cdr_id() object ... DB params like schema","code":""},{"path":"https://eauleaf.github.io/crudr/reference/cdr_id2sql.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a name or DBI::Id to SQL — cdr_id2sql","text":"SQL table object","code":""},{"path":"https://eauleaf.github.io/crudr/reference/cdr_id2sql.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert a name or DBI::Id to SQL — cdr_id2sql","text":"","code":"crudr:::cdr_id2sql('hello') #> <SQL> \"hello\" crudr:::cdr_id2sql(cdr_id(table = 'hello', schema = 'blue')) #> <SQL> \"blue\".\"hello\" crudr:::cdr_id(table = 'hello', schema = 'blue') #> <Id> schema = blue, table = hello crudr:::cdr_id2sql(cdr_id(schema = 'blue', table = 'hello')) #> <SQL> \"blue\".\"hello\" crudr:::cdr_id(schema = 'blue', table = 'hello') #> <Id> schema = blue, table = hello"},{"path":"https://eauleaf.github.io/crudr/reference/cdr_join_tbls.html","id":null,"dir":"Reference","previous_headings":"","what":"Join primary and deltas tables — cdr_join_tbls","title":"Join primary and deltas tables — cdr_join_tbls","text":"Join data db_tbl recent change values chg_log tables. Attaches recent 'WHO_EDITED' 'WHEN_EDITED' form deltas table primary table.","code":""},{"path":"https://eauleaf.github.io/crudr/reference/cdr_join_tbls.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Join primary and deltas tables — cdr_join_tbls","text":"","code":"cdr_join_tbls(db_tbl, chg_log_tbl, key_col)"},{"path":"https://eauleaf.github.io/crudr/reference/cdr_join_tbls.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Join primary and deltas tables — cdr_join_tbls","text":"db_tbl primary table DB chg_log_tbl deltas table DB key_col name unique ID column primary table","code":""},{"path":"https://eauleaf.github.io/crudr/reference/cdr_join_tbls.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Join primary and deltas tables — cdr_join_tbls","text":"tibble joined tables","code":""},{"path":"https://eauleaf.github.io/crudr/reference/cdr_join_tbls.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Join primary and deltas tables — cdr_join_tbls","text":"","code":"chg_log_r_tbl <- structure( list(   OBS_ID = c( \"ID-001\", \"ID-002\"),   FIELD = c(\"Species\", \"Sepal.Width\"),   CHG_FROM = c(\"setosa\", \"3.5\"),   CHG_TO = c(\"set\", \"5\"),   WHO_EDITED = c(\"joe\", \"fred\"),   WHEN_EDITED = c(\"11/29/2023, 1:36:46 AM\", \"11/28/2023, 5:39:21 PM\") ), class = c(\"tbl_df\", \"tbl\", \"data.frame\"), row.names = c(NA, -2L) ) primary_r_tbl <- cdr_make_unique_ids(iris) #> Auto generating Unique IDs for the table. cdr_join_tbls(primary_r_tbl, chg_log_r_tbl, key_col = 'UID') #>  #>    --Running: cdr_join_tbls() #> \t Combine or Recombine primary and delta tables for UI. #> # A tibble: 150 × 8 #>    UID    Sepal.Length Sepal.Width Petal.Length Petal.Width Species #>    <chr>         <dbl>       <dbl>        <dbl>       <dbl> <fct>   #>  1 ID-001          5.1         3.5          1.4         0.2 setosa  #>  2 ID-002          4.9         3            1.4         0.2 setosa  #>  3 ID-003          4.7         3.2          1.3         0.2 setosa  #>  4 ID-004          4.6         3.1          1.5         0.2 setosa  #>  5 ID-005          5           3.6          1.4         0.2 setosa  #>  6 ID-006          5.4         3.9          1.7         0.4 setosa  #>  7 ID-007          4.6         3.4          1.4         0.3 setosa  #>  8 ID-008          5           3.4          1.5         0.2 setosa  #>  9 ID-009          4.4         2.9          1.4         0.2 setosa  #> 10 ID-010          4.9         3.1          1.5         0.1 setosa  #> # ℹ 140 more rows #> # ℹ 2 more variables: WHO_EDITED_LAST <chr>, WHEN_EDITED_LAST <chr>"},{"path":"https://eauleaf.github.io/crudr/reference/cdr_js_edit_ctrl.html","id":null,"dir":"Reference","previous_headings":"","what":"DT Javascript callback to make edit keys\nmimic the navigation and cell editing keys of LibreCalc/Excel — cdr_js_edit_ctrl","title":"DT Javascript callback to make edit keys\nmimic the navigation and cell editing keys of LibreCalc/Excel — cdr_js_edit_ctrl","text":"DT Javascript callback make edit keys mimic navigation cell editing keys LibreCalc/Excel","code":""},{"path":"https://eauleaf.github.io/crudr/reference/cdr_js_edit_ctrl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DT Javascript callback to make edit keys\nmimic the navigation and cell editing keys of LibreCalc/Excel — cdr_js_edit_ctrl","text":"","code":"cdr_js_edit_ctrl()"},{"path":"https://eauleaf.github.io/crudr/reference/cdr_js_edit_ctrl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DT Javascript callback to make edit keys\nmimic the navigation and cell editing keys of LibreCalc/Excel — cdr_js_edit_ctrl","text":"javascript DT::datatable()","code":""},{"path":"https://eauleaf.github.io/crudr/reference/cdr_js_edit_ctrl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"DT Javascript callback to make edit keys\nmimic the navigation and cell editing keys of LibreCalc/Excel — cdr_js_edit_ctrl","text":"","code":"cdr_js_edit_ctrl() #>  #>    --Running: cdr_js_edit_ctrl() #> [1] \"// If you're on a cell and key 'Enter' or 'F2', enter edit mode\\ntable.on('key', function(e, datatable, key, cell){\\nconsole.log(key);\\n  if ( key === 113 || key === 13 ){\\n    $(cell.node()).trigger('dblclick.dt');\\n  }\\n});\\ntable.on('keydown', 'td', function(e){\\nconsole.log(e.which);\\n// If you're editing a cell and press 'Tab, F2, up or down' to enter the new data\\n  if (e.target.localName == 'input' && [9,38,40,113].indexOf(e.keyCode) > -1){\\n    $(e.target).trigger('blur');\\n// If you're editing a cell and press 'left, right, home, or end', perform those jumps within the cell text\\n  } else if (e.target.localName == 'input' && [35,36,37,39].indexOf(e.keyCode) > -1) {\\n    e.stopPropagation();\\n// If you're editing a cell and then press 'escape', remove any User changes\\n  } else if (e.target.localName == 'input' && e.keyCode === 27) {\\n    e.stopPropagation();\\n    var prior_val = table.cell( this ).data();\\n    $(e.target).val( prior_val );\\n    $(e.target).trigger('blur');\\n// If you're editing a cell and press 'enter', mimic the downarrow\\n  } else if (e.target.localName == 'input' && e.keyCode === 13 ) {\\n    e.stopPropagation();\\n    $(e.target).trigger('blur');\\n  }\\n});\" #> attr(,\"class\") #> [1] \"JS_EVAL\""},{"path":"https://eauleaf.github.io/crudr/reference/cdr_label_chg_log_activity.html","id":null,"dir":"Reference","previous_headings":"","what":"Create change types for the change-log table — cdr_label_chg_log_activity","title":"Create change types for the change-log table — cdr_label_chg_log_activity","text":"Attach column data change-log describing type user change, .e. 'created' - user created new ID 'deleted' user deleted ID associated row elements 'updated' user made change field existing ID","code":""},{"path":"https://eauleaf.github.io/crudr/reference/cdr_label_chg_log_activity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create change types for the change-log table — cdr_label_chg_log_activity","text":"","code":"cdr_label_chg_log_activity(chg_log, key_field = \"UID\")"},{"path":"https://eauleaf.github.io/crudr/reference/cdr_label_chg_log_activity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create change types for the change-log table — cdr_label_chg_log_activity","text":"chg_log change-log tibble pulled DB key_field field primary table contains unique-ID observation","code":""},{"path":"https://eauleaf.github.io/crudr/reference/cdr_label_chg_log_activity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create change types for the change-log table — cdr_label_chg_log_activity","text":"change-log tibble activity type attached","code":""},{"path":"https://eauleaf.github.io/crudr/reference/cdr_label_chg_log_activity.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create change types for the change-log table — cdr_label_chg_log_activity","text":"","code":"if (FALSE) {   cdr_label_chg_log_activity(chg_log, 'UID') }"},{"path":"https://eauleaf.github.io/crudr/reference/cdr_make_db_tbls.html","id":null,"dir":"Reference","previous_headings":"","what":"Creates primary and deltas tables in a DB — cdr_make_db_tbls","title":"Creates primary and deltas tables in a DB — cdr_make_db_tbls","text":"Writes initial primary table database specified conn_pool, well corresponding deltas metadata table required change tracking.","code":""},{"path":"https://eauleaf.github.io/crudr/reference/cdr_make_db_tbls.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Creates primary and deltas tables in a DB — cdr_make_db_tbls","text":"","code":"cdr_make_db_tbls(   conn_pool,   db_tbl,   key_field = NULL,   make_deltas_tbl = TRUE,   chg_log_suffix = \"_DELTAS\",   ... )"},{"path":"https://eauleaf.github.io/crudr/reference/cdr_make_db_tbls.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Creates primary and deltas tables in a DB — cdr_make_db_tbls","text":"conn_pool database connection class 'pool' db_tbl dataframe; primary table place database key_field string: unique ID column name data. NULL, creates key field called UID make_deltas_tbl set FALSE want write primary table without corresponding change log table chg_log_suffix provide suffix default '_DELTAS' creating database change-log table ... additional table name parameters passed cdr_id(), e.g. table = \"mytable\", cluster = \"mycluster\", catalog = \"mycatalog\", schema = \"myschema\". Passing table = , specifies table name.","code":""},{"path":"https://eauleaf.github.io/crudr/reference/cdr_make_db_tbls.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Creates primary and deltas tables in a DB — cdr_make_db_tbls","text":"invisibly returns NULL","code":""},{"path":"https://eauleaf.github.io/crudr/reference/cdr_make_db_tbls.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Creates primary and deltas tables in a DB — cdr_make_db_tbls","text":"Note: want remove table, functions can helpful: pool::dbListTables(conn_pool) pool::dbRemoveTable(conn_pool, cdr_id(table = 'some_table'))","code":""},{"path":"https://eauleaf.github.io/crudr/reference/cdr_make_db_tbls.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Creates primary and deltas tables in a DB — cdr_make_db_tbls","text":"","code":"if (FALSE) {  con <- pool::dbPool(DBI::dbConnect(RSQLite::SQLite(), 'iris.db'))  cdr_make_db_tbls(con, iris)  pool::dbListTables(conn_pool)  pool::dbRemoveTable(con, 'iris')  pool::dbRemoveTable(con, 'iris_deltas')   con <- DBI::dbConnect(  RPostgres::Postgres(),  host = \"localhost\",  dbname = \"PG_DEV\",  user = Sys.getenv(\"postgres_username\"),  password = Sys.getenv(\"postgres_password\")  )   cdr_make_db_tbls(con, iris, schema = 'test')  }"},{"path":"https://eauleaf.github.io/crudr/reference/cdr_make_unique_ids.html","id":null,"dir":"Reference","previous_headings":"","what":"Attach unique IDs as the key column — cdr_make_unique_ids","title":"Attach unique IDs as the key column — cdr_make_unique_ids","text":"Attach unique IDs key column","code":""},{"path":"https://eauleaf.github.io/crudr/reference/cdr_make_unique_ids.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Attach unique IDs as the key column — cdr_make_unique_ids","text":"","code":"cdr_make_unique_ids(db_tbl, key_field = \"UID\", use_guid = FALSE)"},{"path":"https://eauleaf.github.io/crudr/reference/cdr_make_unique_ids.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Attach unique IDs as the key column — cdr_make_unique_ids","text":"db_tbl dataframe key_field name column Unique ID use_guid use 12 digit GUID instead default format","code":""},{"path":"https://eauleaf.github.io/crudr/reference/cdr_make_unique_ids.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Attach unique IDs as the key column — cdr_make_unique_ids","text":"table column Unique IDs","code":""},{"path":"https://eauleaf.github.io/crudr/reference/cdr_make_unique_ids.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Attach unique IDs as the key column — cdr_make_unique_ids","text":"","code":"cdr_make_unique_ids(utils::head(iris,11)) #> Auto generating Unique IDs for the table. #> # A tibble: 11 × 6 #>    UID   Sepal.Length Sepal.Width Petal.Length Petal.Width Species #>    <chr>        <dbl>       <dbl>        <dbl>       <dbl> <fct>   #>  1 ID-01          5.1         3.5          1.4         0.2 setosa  #>  2 ID-02          4.9         3            1.4         0.2 setosa  #>  3 ID-03          4.7         3.2          1.3         0.2 setosa  #>  4 ID-04          4.6         3.1          1.5         0.2 setosa  #>  5 ID-05          5           3.6          1.4         0.2 setosa  #>  6 ID-06          5.4         3.9          1.7         0.4 setosa  #>  7 ID-07          4.6         3.4          1.4         0.3 setosa  #>  8 ID-08          5           3.4          1.5         0.2 setosa  #>  9 ID-09          4.4         2.9          1.4         0.2 setosa  #> 10 ID-10          4.9         3.1          1.5         0.1 setosa  #> 11 ID-11          5.4         3.7          1.5         0.2 setosa  cdr_make_unique_ids(utils::head(iris,11), key_field = 'GUID', use_guid = TRUE) #> Auto generating Unique IDs for the table. #> # A tibble: 11 × 6 #>    GUID         Sepal.Length Sepal.Width Petal.Length Petal.Width Species #>    <chr>               <dbl>       <dbl>        <dbl>       <dbl> <fct>   #>  1 18c4aebd5457          5.1         3.5          1.4         0.2 setosa  #>  2 4445135283ff          4.9         3            1.4         0.2 setosa  #>  3 1dd4324fbaf0          4.7         3.2          1.3         0.2 setosa  #>  4 53c080368a71          4.6         3.1          1.5         0.2 setosa  #>  5 a11af8837235          5           3.6          1.4         0.2 setosa  #>  6 91099b1d0435          5.4         3.9          1.7         0.4 setosa  #>  7 9b966af9c6c0          4.6         3.4          1.4         0.3 setosa  #>  8 6d60585b9544          5           3.4          1.5         0.2 setosa  #>  9 09e7a1f42ec2          4.4         2.9          1.4         0.2 setosa  #> 10 2bf8e8b0d65e          4.9         3.1          1.5         0.1 setosa  #> 11 17356662935e          5.4         3.7          1.5         0.2 setosa"},{"path":"https://eauleaf.github.io/crudr/reference/cdr_manage_db_tbls.html","id":null,"dir":"Reference","previous_headings":"","what":"Server module to present and control a DB table — cdr_manage_db_tbls","title":"Server module to present and control a DB table — cdr_manage_db_tbls","text":"function server module gets database tables DB, presents table shiny server, syncs user changes UI server-memory R tables, back-end DB.","code":""},{"path":"https://eauleaf.github.io/crudr/reference/cdr_manage_db_tbls.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Server module to present and control a DB table — cdr_manage_db_tbls","text":"","code":"cdr_manage_db_tbls(   db_tbl_name,   key_col,   conn_pool,   session,   add_row_permission = FALSE,   del_row_permission = FALSE,   cell_edit_permission = FALSE,   lock_fields = c(),   multiuser_update_wait = 0,   chg_log_suffix = \"_DELTAS\",   ... )"},{"path":"https://eauleaf.github.io/crudr/reference/cdr_manage_db_tbls.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Server module to present and control a DB table — cdr_manage_db_tbls","text":"db_tbl_name string specifying table name primary database table managing, e.g. 'iris_tbl' key_col name unique ID column db table (table must unique ID column unique IDs) conn_pool db connection package 'pool' 'DBI' session current shiny session add_row_permission T F: allows user add row primary table module del_row_permission T F: allows user delete row primary table module cell_edit_permission T F: make editable primary table module (cell_edit_permission = T means user can change data) (cell_edit_permission = F means user can see data) lock_fields strings: vector field names database table lock user editing multiuser_update_wait numeric: minimum time seconds checking incorporating potential data changes made users chg_log_suffix optional string identify suffix '_DELTAS' database change-log table ... additional parameters specify primary table location database needed, e.g. schema = 'my_schema', catalog = 'some_catalog'","code":""},{"path":"https://eauleaf.github.io/crudr/reference/cdr_manage_db_tbls.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Server module to present and control a DB table — cdr_manage_db_tbls","text":"returns DT shiny ui environment, side-effect returns chg_log_tbl editable db_tbl specified namespace","code":""},{"path":"https://eauleaf.github.io/crudr/reference/cdr_manage_db_tbls.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Server module to present and control a DB table — cdr_manage_db_tbls","text":"","code":"if (FALSE) { con <- pool::dbPool(DBI::dbConnect(RSQLite::SQLite(), 'iris.db')) cdr_make_db_tbls(con, iris) server <- function(input, output, session){              r_tbl <- cdr_manage_db_tbls('iris', 'UID', con, session)              output$iris <- DT::renderDT(r_tbl()) } ui <- shiny::fluidPage(DT::DTOutput('iris')) shiny::shinyApp(ui,server) }"},{"path":"https://eauleaf.github.io/crudr/reference/cdr_name_delta_tbl.html","id":null,"dir":"Reference","previous_headings":"","what":"creates the name of the change tracking table so it's set in one location — cdr_name_delta_tbl","title":"creates the name of the change tracking table so it's set in one location — cdr_name_delta_tbl","text":"creates name change tracking table set one location","code":""},{"path":"https://eauleaf.github.io/crudr/reference/cdr_name_delta_tbl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"creates the name of the change tracking table so it's set in one location — cdr_name_delta_tbl","text":"","code":"cdr_name_delta_tbl(db_tbl_name, chg_log_suffix = \"_DELTAS\")"},{"path":"https://eauleaf.github.io/crudr/reference/cdr_name_delta_tbl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"creates the name of the change tracking table so it's set in one location — cdr_name_delta_tbl","text":"db_tbl_name char string: name primary table deltas table track chg_log_suffix specified, appends string chg_log DB table name rather \"_DELTAS\"","code":""},{"path":"https://eauleaf.github.io/crudr/reference/cdr_name_delta_tbl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"creates the name of the change tracking table so it's set in one location — cdr_name_delta_tbl","text":"char string: name table track changes primary table","code":""},{"path":"https://eauleaf.github.io/crudr/reference/cdr_name_delta_tbl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"creates the name of the change tracking table so it's set in one location — cdr_name_delta_tbl","text":"","code":"crudr:::cdr_name_delta_tbl('some_table_name') #> some_table_name_DELTAS   crudr:::cdr_name_delta_tbl('some_table_name', chg_log_suffix = '_deltas') #> some_table_name_deltas   crudr:::cdr_name_delta_tbl('some_table_name', chg_log_suffix = '_chglog') #> some_table_name_chglog"},{"path":"https://eauleaf.github.io/crudr/reference/cdr_pull_db_tbls.html","id":null,"dir":"Reference","previous_headings":"","what":"Collect both tables (admin & chg-log) from the DB, join them in a user view,\nand return all 3 tables in a list — cdr_pull_db_tbls","title":"Collect both tables (admin & chg-log) from the DB, join them in a user view,\nand return all 3 tables in a list — cdr_pull_db_tbls","text":"Collect tables (admin & chg-log) DB, join user view, return 3 tables list","code":""},{"path":"https://eauleaf.github.io/crudr/reference/cdr_pull_db_tbls.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Collect both tables (admin & chg-log) from the DB, join them in a user view,\nand return all 3 tables in a list — cdr_pull_db_tbls","text":"","code":"cdr_pull_db_tbls(   conn_pool,   db_tbl_name,   chg_log_suffix = \"_DELTAS\",   key_field = \"UID\",   ... )"},{"path":"https://eauleaf.github.io/crudr/reference/cdr_pull_db_tbls.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Collect both tables (admin & chg-log) from the DB, join them in a user view,\nand return all 3 tables in a list — cdr_pull_db_tbls","text":"conn_pool connection object (preferably pool::dbPool() connection) db_tbl_name name primary table chg_log_suffix name change-log table suffix key_field column primary table acts unique row identifier ... database pointer params like schema","code":""},{"path":"https://eauleaf.github.io/crudr/reference/cdr_pull_db_tbls.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Collect both tables (admin & chg-log) from the DB, join them in a user view,\nand return all 3 tables in a list — cdr_pull_db_tbls","text":"list primary (admin), change-log, end-user view tables list elements","code":""},{"path":"https://eauleaf.github.io/crudr/reference/cdr_pull_db_tbls.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Collect both tables (admin & chg-log) from the DB, join them in a user view,\nand return all 3 tables in a list — cdr_pull_db_tbls","text":"","code":"if (FALSE) { con <- DBI::dbConnect(   drv = RPostgres::Postgres(),   dbname = \"test\",   host = \"localhost\",   user = Sys.getenv('postgres_username'),   password = Sys.getenv('postgres_password')   )  as_of <- lubridate::now()-lubridate::years(1) DBI::dbListTables(con) DBI::dbListObjects(con) # both_tbls <- cdr_pull_db_tbls(con, db_tbl_name = 'iris', key_field = 'UID', schema = \"test\") DBI::dbDisconnect(con) }"},{"path":"https://eauleaf.github.io/crudr/reference/cdr_reconstruct_past_tbl.html","id":null,"dir":"Reference","previous_headings":"","what":"Build the admin table as it was at a point in the past — cdr_reconstruct_past_tbl","title":"Build the admin table as it was at a point in the past — cdr_reconstruct_past_tbl","text":"Build admin table point past","code":""},{"path":"https://eauleaf.github.io/crudr/reference/cdr_reconstruct_past_tbl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build the admin table as it was at a point in the past — cdr_reconstruct_past_tbl","text":"","code":"cdr_reconstruct_past_tbl(   as_of = lubridate::now() - lubridate::weeks(x = 4),   conn_pool,   db_tbl_name,   chg_log_suffix = \"_DELTAS\",   key_field = \"UID\",   ... )"},{"path":"https://eauleaf.github.io/crudr/reference/cdr_reconstruct_past_tbl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Build the admin table as it was at a point in the past — cdr_reconstruct_past_tbl","text":"as_of datetime object past, e.g. lubridate::now()-lubridate::weeks(4) conn_pool pool DBI connection db_tbl_name primary table name chg_log_suffix table name extension specifying corresponding change-log table, e.g. '_deltas' key_field column primary table acts unique row identifier ... connection parameters like schema = public","code":""},{"path":"https://eauleaf.github.io/crudr/reference/cdr_reconstruct_past_tbl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Build the admin table as it was at a point in the past — cdr_reconstruct_past_tbl","text":"list primary change-log tables reconstructed time past","code":""},{"path":"https://eauleaf.github.io/crudr/reference/cdr_reconstruct_past_tbl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Build the admin table as it was at a point in the past — cdr_reconstruct_past_tbl","text":"","code":"if (FALSE) { conn_pool <- pool::dbPool(   DBI::dbConnect( drv = RPostgreSQL::PostgreSQL(),                   dbname = \"test\",                   host = \"localhost\",                   port = \"5432\",                   user = Sys.getenv('postgres_username'),                   password = Sys.getenv('postgres_password')) ) cdr_reconstruct_past_tbl(conn_pool = conn_pool, db_tbl_name = 'mtcars', schema = \"test\") cdr_reconstruct_past_tbl(conn_pool = conn_pool, db_tbl_name = 'mtcars', schema = \"test\") pool::poolClose(conn_pool) }"},{"path":"https://eauleaf.github.io/crudr/reference/cdr_row_editor_html.html","id":null,"dir":"Reference","previous_headings":"","what":"The html for the UI to add and delete new rows — cdr_row_editor_html","title":"The html for the UI to add and delete new rows — cdr_row_editor_html","text":"Responsive given permissions","code":""},{"path":"https://eauleaf.github.io/crudr/reference/cdr_row_editor_html.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The html for the UI to add and delete new rows — cdr_row_editor_html","text":"","code":"cdr_row_editor_html(   notes_txt = \"\",   id,   add_row_permission = F,   del_row_permission = F )"},{"path":"https://eauleaf.github.io/crudr/reference/cdr_row_editor_html.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The html for the UI to add and delete new rows — cdr_row_editor_html","text":"notes_txt message send UI edit page id namespace id - corresponds table name add_row_permission T F: whether user permission add new observation, .e. Unique ID row del_row_permission T F: whether user permission delete new observation, .e. Unique ID row","code":""},{"path":"https://eauleaf.github.io/crudr/reference/cdr_row_editor_html.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The html for the UI to add and delete new rows — cdr_row_editor_html","text":"ui output component","code":""},{"path":"https://eauleaf.github.io/crudr/reference/cdr_row_editor_html.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The html for the UI to add and delete new rows — cdr_row_editor_html","text":"","code":"crudr:::cdr_row_editor_html('hello', 'iris', TRUE, TRUE) #>  #>    --Running: cdr_row_editor_html() #> \tGranting user permissions: add and delete rows.  #> <span style=\"display: inline-flex; align-items: center; font-size: 10px;\"> #>   <div class=\"form-group shiny-input-container\" style=\"width:180px;\"> #>     <label class=\"control-label\" id=\"iris-uid-label\" for=\"iris-uid\"><\/label> #>     <input id=\"iris-uid\" type=\"text\" class=\"shiny-input-text form-control\" value=\"\" placeholder=\"Enter Unique ID\"/> #>   <\/div> #>   <button id=\"iris-create_row_btn\" type=\"button\" class=\"btn btn-default action-button\" text=\"Create Row\" style=\"margin-left: 15px;\">Create Row<\/button> #>   <button id=\"iris-delete_row_btn\" type=\"button\" class=\"btn btn-default action-button\" text=\"Delete Row\" style=\"margin-left: 15px;\">Delete Row<\/button> #>   <span style=\"color:red; font-size: 130%; margin-left: 15px;\">hello<\/span> #> <\/span>"},{"path":"https://eauleaf.github.io/crudr/reference/cdr_std_pad.html","id":null,"dir":"Reference","previous_headings":"","what":"Integer sequence with preceding zeroes — cdr_std_pad","title":"Integer sequence with preceding zeroes — cdr_std_pad","text":"Integer sequence preceding zeroes","code":""},{"path":"https://eauleaf.github.io/crudr/reference/cdr_std_pad.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Integer sequence with preceding zeroes — cdr_std_pad","text":"","code":"cdr_std_pad(n)"},{"path":"https://eauleaf.github.io/crudr/reference/cdr_std_pad.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Integer sequence with preceding zeroes — cdr_std_pad","text":"n length sequence","code":""},{"path":"https://eauleaf.github.io/crudr/reference/cdr_std_pad.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Integer sequence with preceding zeroes — cdr_std_pad","text":"character vector","code":""},{"path":"https://eauleaf.github.io/crudr/reference/cdr_std_pad.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Integer sequence with preceding zeroes — cdr_std_pad","text":"","code":"crudr:::cdr_std_pad(3) #> [1] \"1\" \"2\" \"3\" crudr:::cdr_std_pad(10) #>  [1] \"01\" \"02\" \"03\" \"04\" \"05\" \"06\" \"07\" \"08\" \"09\" \"10\""},{"path":"https://eauleaf.github.io/crudr/reference/cdr_tbl2ansi_format.html","id":null,"dir":"Reference","previous_headings":"","what":"Prep dataframe columns to become SQL insert stmts — cdr_tbl2ansi_format","title":"Prep dataframe columns to become SQL insert stmts — cdr_tbl2ansi_format","text":"Prep dataframe columns become SQL insert stmts","code":""},{"path":"https://eauleaf.github.io/crudr/reference/cdr_tbl2ansi_format.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prep dataframe columns to become SQL insert stmts — cdr_tbl2ansi_format","text":"","code":"cdr_tbl2ansi_format(db_tbl, tzone = \"UTC\")"},{"path":"https://eauleaf.github.io/crudr/reference/cdr_tbl2ansi_format.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prep dataframe columns to become SQL insert stmts — cdr_tbl2ansi_format","text":"db_tbl dataframe tzone database default timezone","code":""},{"path":"https://eauleaf.github.io/crudr/reference/cdr_tbl2ansi_format.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prep dataframe columns to become SQL insert stmts — cdr_tbl2ansi_format","text":"tibble","code":""},{"path":"https://eauleaf.github.io/crudr/reference/cdr_tbl2ansi_format.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prep dataframe columns to become SQL insert stmts — cdr_tbl2ansi_format","text":"","code":"example_df <- dplyr::mutate(iris, bool = Species == 'setosa', day = Sys.Date(), test = Sys.time()) adj_df <- crudr:::cdr_tbl2ansi_format(example_df) adj_df <- crudr:::cdr_tbl2ansi_format(example_df, Sys.timezone())"},{"path":"https://eauleaf.github.io/crudr/reference/cdr_trunc_tbl.html","id":null,"dir":"Reference","previous_headings":"","what":"Removes a specified table by deleting the table or by removing just the table data (truncating) — cdr_trunc_tbl","title":"Removes a specified table by deleting the table or by removing just the table data (truncating) — cdr_trunc_tbl","text":"Removes specified table deleting table removing just table data (truncating)","code":""},{"path":"https://eauleaf.github.io/crudr/reference/cdr_trunc_tbl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Removes a specified table by deleting the table or by removing just the table data (truncating) — cdr_trunc_tbl","text":"","code":"cdr_trunc_tbl(   conn_pool,   db_tbl_name = NULL,   removal = c(\"truncate\", \"delete\"),   ... )"},{"path":"https://eauleaf.github.io/crudr/reference/cdr_trunc_tbl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Removes a specified table by deleting the table or by removing just the table data (truncating) — cdr_trunc_tbl","text":"conn_pool pool connection object: pool connections established session db_tbl_name string: name specific table, cdr_id() object removal string: one 'truncate' 'delete' ... args specifying DB table schema = 'my_schema'","code":""},{"path":"https://eauleaf.github.io/crudr/reference/cdr_trunc_tbl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Removes a specified table by deleting the table or by removing just the table data (truncating) — cdr_trunc_tbl","text":"TRUE success; FALSE removal fail","code":""},{"path":"https://eauleaf.github.io/crudr/reference/cdr_trunc_tbl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Removes a specified table by deleting the table or by removing just the table data (truncating) — cdr_trunc_tbl","text":"","code":"if (FALSE) {  con <- pool::dbPool(DBI::dbConnect(RSQLite::SQLite(), 'test.db')) example_tbl <- dplyr::mutate(iris, bool = Species == 'setosa', day = Sys.Date(), test = Sys.time()) cdr_make_db_tbls(con, example_tbl, chg_log_suffix = '_deltas') con |> DBI::dbListTables() cdr_trunc_tbl(conn_pool = con, db_tbl_name = 'example_tbl', removal = 'truncate') con |> DBI::dbListTables() DBI::dbListTables(con) |> purrr::map(\\(.) cdr_trunc_tbl(con, ., 'delete')) con |> DBI::dbListTables() pool::poolClose(con)  }"},{"path":"https://eauleaf.github.io/crudr/reference/cdr_update_db_deltas_tbl.html","id":null,"dir":"Reference","previous_headings":"","what":"Populates deltas table when user updates primary table — cdr_update_db_deltas_tbl","title":"Populates deltas table when user updates primary table — cdr_update_db_deltas_tbl","text":"Connects posts --data change tracking table Function called user updates data primary table","code":""},{"path":"https://eauleaf.github.io/crudr/reference/cdr_update_db_deltas_tbl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Populates deltas table when user updates primary table — cdr_update_db_deltas_tbl","text":"","code":"cdr_update_db_deltas_tbl(   conn_pool,   db_tbl_name,   to_deltas_tbl,   db_tzone = cdr_adj_timezone(conn_pool) )"},{"path":"https://eauleaf.github.io/crudr/reference/cdr_update_db_deltas_tbl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Populates deltas table when user updates primary table — cdr_update_db_deltas_tbl","text":"conn_pool pool connection object: pool connections established session db_tbl_name string: name specific database table cdr_id() object to_deltas_tbl tibble delta values append db_tzone DB timezone (obtained cdr_adj_timezone(conn_pool))","code":""},{"path":"https://eauleaf.github.io/crudr/reference/cdr_update_db_deltas_tbl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Populates deltas table when user updates primary table — cdr_update_db_deltas_tbl","text":"-memory copy data appended tracking table","code":""},{"path":"https://eauleaf.github.io/crudr/reference/cdr_update_db_primary_tbl.html","id":null,"dir":"Reference","previous_headings":"","what":"Updates the primary db table by specifying value to change,\ncorresponding db table, unique row ID, and column — cdr_update_db_primary_tbl","title":"Updates the primary db table by specifying value to change,\ncorresponding db table, unique row ID, and column — cdr_update_db_primary_tbl","text":"Updates primary db table specifying value change, corresponding db table, unique row ID, column","code":""},{"path":"https://eauleaf.github.io/crudr/reference/cdr_update_db_primary_tbl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Updates the primary db table by specifying value to change,\ncorresponding db table, unique row ID, and column — cdr_update_db_primary_tbl","text":"","code":"cdr_update_db_primary_tbl(   conn_pool = conn_pool,   db_tbl_name = NULL,   update_value = NULL,   value_colname = NULL,   value_rowuid = NULL,   key_column = NULL )"},{"path":"https://eauleaf.github.io/crudr/reference/cdr_update_db_primary_tbl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Updates the primary db table by specifying value to change,\ncorresponding db table, unique row ID, and column — cdr_update_db_primary_tbl","text":"conn_pool pool connection object: pool connections established session db_tbl_name string: name specific table update, cdr_id() object update_value number string: value update already correct data type value_colname string: specific column name value update located value_rowuid number string: specific row unique ID corresponds row value update located (key) key_column string: name column unique ID (key column)","code":""},{"path":"https://eauleaf.github.io/crudr/reference/cdr_update_db_primary_tbl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Updates the primary db table by specifying value to change,\ncorresponding db table, unique row ID, and column — cdr_update_db_primary_tbl","text":"TRUE","code":""},{"path":"https://eauleaf.github.io/crudr/reference/cdr_which_db.html","id":null,"dir":"Reference","previous_headings":"","what":"Given a DBI or pool connection, provides DB type — cdr_which_db","title":"Given a DBI or pool connection, provides DB type — cdr_which_db","text":"Given DBI pool connection, provides DB type","code":""},{"path":"https://eauleaf.github.io/crudr/reference/cdr_which_db.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Given a DBI or pool connection, provides DB type — cdr_which_db","text":"","code":"cdr_which_db(conn)"},{"path":"https://eauleaf.github.io/crudr/reference/cdr_which_db.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Given a DBI or pool connection, provides DB type — cdr_which_db","text":"conn pool DBI connection db","code":""},{"path":"https://eauleaf.github.io/crudr/reference/cdr_which_db.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Given a DBI or pool connection, provides DB type — cdr_which_db","text":"string representing db type","code":""},{"path":"https://eauleaf.github.io/crudr/reference/cdr_which_db.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Given a DBI or pool connection, provides DB type — cdr_which_db","text":"","code":"if (FALSE) { # create some connections ------------------------------------------------- pg_dbi_conn <- DBI::dbConnect( RPostgreSQL::PostgreSQL(),                         dbname = \"test\",                         host = \"localhost\",                         port = \"5432\",                         user = Sys.getenv('postgres_username'),                         password = Sys.getenv('postgres_password') ) pg_dbi_conn |> cdr_which_db() pg_dbi_conn |> pool::dbGetQuery('SELECT CURRENT_TIMESTAMP') #In Client TIMEZONE pg_dbi_conn |> pool::dbGetQuery('SELECT LOCALTIMESTAMP') #In DB TIMEZONE pg_dbi_conn |> DBI::dbDisconnect()  pg_pool_conn <- pool::dbPool(pg_dbi_conn) pg_pool_conn |> cdr_which_db() pg_pool_conn |> pool::dbGetQuery('SELECT CURRENT_TIMESTAMP') #In Client TIMEZONE pg_pool_conn |> pool::dbGetQuery('SELECT LOCALTIMESTAMP') #In DB TIMEZONE pg_pool_conn |> pool::poolClose()  sqlite_dbi_mem_conn <- DBI::dbConnect(RSQLite::SQLite(), \":memory:\") sqlite_dbi_mem_conn |> cdr_which_db() sqlite_dbi_mem_conn |> DBI::dbGetQuery('SELECT CURRENT_TIMESTAMP') #UTC sqlite_dbi_mem_conn |> DBI::dbGetQuery('SELECT LOCALTIMESTAMP') # no go sqlite_dbi_mem_conn |> DBI::dbDisconnect()  sqlite_dbi_conn <- DBI::dbConnect(RSQLite::SQLite(), 'test.db') sqlite_dbi_conn |> cdr_which_db() sqlite_dbi_conn |> DBI::dbGetQuery('SELECT CURRENT_TIMESTAMP') #UTC sqlite_dbi_conn |> DBI::dbGetQuery('SELECT LOCALTIMESTAMP') # no go sqlite_dbi_conn |> DBI::dbDisconnect()  sqlite_pool_conn <- pool::dbPool(DBI::dbConnect(RSQLite::SQLite(), 'test.db')) sqlite_pool_conn |> cdr_which_db() sqlite_pool_conn |> DBI::dbDisconnect() sqlite_pool_conn |> pool::poolClose()  Sys.time() |> lubridate::with_tz(tzone = 'UTC')  }"}]
