[{"path":"https://eauleaf.github.io/crudr/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2021 crudr authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":[]},{"path":"https://eauleaf.github.io/crudr/articles/crudr.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"crudr","text":"package CRUD app. idea behind crudr make easy organization centrally maintain single source golden data time allowing distributed control data updates.","code":""},{"path":"https://eauleaf.github.io/crudr/articles/crudr.html","id":"a-common-problem","dir":"Articles","previous_headings":"Overview","what":"A Common Problem","title":"crudr","text":"company worked different departments different spreadsheets track information. instance, let’s say bunch store locations company. Ideally, someone company updated information locations, e.g. store’s mailing address, phone number, email, manager, manager’s email, etc. companies, information actually resides lot different places almost always errors managers move around, store leases expire, spreadsheets got maintainers become outdated. , Joe might charge locations, Sally knows Manager info, etc. need data correct, joined, posted, available everyone, time time, maintaining quality data hard . package helps solve distributed data updating distributed data use problem.","code":""},{"path":"https://eauleaf.github.io/crudr/articles/crudr.html","id":"goals-for-crudr","dir":"Articles","previous_headings":"Overview","what":"Goals for crudr","title":"crudr","text":"goals crudr : Present data relational database Shiny app viewing management Separate data viewers data managers / administrators Make easy control admin users can update columns DB table Keep record changes made database table corresponding change log table Allow one simultaneous editor without crashes database agnostic","code":""},{"path":"https://eauleaf.github.io/crudr/articles/crudr.html","id":"other-notes","dir":"Articles","previous_headings":"Overview > Goals for crudr","what":"Other Notes","title":"crudr","text":"Crudr works synchronizing tables User’s Computer, Host Server, Database code built Shiny modules can manage present several tables app SQLite, Postgres, Snowflake databases tested database checks periodically whether admins made changes data; , UI server refresh love someone RStudio improve code just take code make . ’d great people use app broadly since problem exists often, don’t know make really robust since ’m novice.","code":""},{"path":[]},{"path":"https://eauleaf.github.io/crudr/articles/crudr.html","id":"getting-started","dir":"Articles","previous_headings":"","what":"Getting Started","title":"crudr","text":"install crudr, run: Example built packages, might want install packages. Note: package ‘pool’ must updated version CRAN.","code":"remotes::install_github('eauleaf/crudr') install.packages(c(   'shiny',   'shinydashboard',   'tidyverse',   'lubridate',   'DT',   'pool' ))"},{"path":"https://eauleaf.github.io/crudr/articles/crudr.html","id":"crudr-functions","dir":"Articles","previous_headings":"Getting Started","what":"4 crudr functions","title":"crudr","text":"really 4 crudr functions need know: cdr_make_db_tbls(), cdr_manage_db_tbls(), cdr_deliver_admin_tbl(), & cdr_deliver_chg_log_tbl().","code":""},{"path":"https://eauleaf.github.io/crudr/articles/crudr.html","id":"cdr_make_db_tbls","dir":"Articles","previous_headings":"Getting Started > 4 crudr functions","what":"1) cdr_make_db_tbls()","title":"crudr","text":"function writes two tables database. hand function tibble pool connection, ’ll write table, well corresponding change tracking table, database. already main table database, problem. Run function inputs cdr_make_db_tbls() just create change tracking table. already tables, function doesn’t anything except write notes R console saying ’s going mess tables already exist. Note: crudr work, row table write must Unique ID ’s recorded character. don’t Unique ID key field table , cdr_make_db_tbls() initially writes table, function automatically make one named “UID”.","code":""},{"path":"https://eauleaf.github.io/crudr/articles/crudr.html","id":"example-for-cdr_make_db_tbls","dir":"Articles","previous_headings":"","what":"crudr","title":"crudr","text":"want create database machine called ‘test.db’, want put table called ‘iris’, ’d write: ’d call function connection table write. code join new column, ‘UID’, onto iris data push table test database. already created Unique ID key field table, just tell function name field cdr_make_db_tbls(con, iris, key_field = 'name_of_your_unique_id_field'). Okay, function written database table called ‘iris’ second table called ‘iris_DELTAS’. table names case sensitive. can see tables function wrote running following: see printout: “iris” “iris_DELTAS”. two tables original table ‘UID’ field secondary table named like first, ‘*_DELTAS’. ‘iris_DELTAS’ deltas table change log. change make primary table admin user interface, ’ll create , gets recorded deltas table. side note, want remove tables later, can : , just delete database ‘test.db’.","code":"con <- pool::dbPool(DBI::dbConnect(RSQLite::SQLite(), 'test.db')) cdr_make_db_tbls(con, iris) paste(pool::dbListTables(con), collapse = ', ') pool::dbRemoveTable(con,'iris') pool::dbRemoveTable(con,'iris_DELTAS')"},{"path":"https://eauleaf.github.io/crudr/articles/crudr.html","id":"cdr_manage_db_tbls","dir":"Articles","previous_headings":"Getting Started > 4 crudr functions","what":"2) cdr_manage_db_tbls()","title":"crudr","text":"function workhorse package. remember one function, one. function handful arguments. minimum, tell function: name table . example case ’s, db_tbl_name = ‘iris’. field Unique ID. example case ’s key_col = ‘UID’. database connection . example case ’s, conn_pool = con. ’s . arguments can change want control can update things primary (admin) table, can just ‘F1’ get function . , cdr_manage_db_tbls() returns 1 table directly 2 tables invisibly. direct table output example app : iris_r_tbl main R table output functions, iris_r_tbl <- dr_manage_db_tbls(). ’s reactive table, use table acting like ’s function, otherwise treat like table. , wanted select columns filter rows, ’d write, iris_r_tbl() %>% select(some_columns) %>% filter(some_rows), just like table object. iris_r_tbl() table ; can whatever want . can send format like, change column names, filter , join something else…whatever. ’s output masses.","code":""},{"path":"https://eauleaf.github.io/crudr/articles/crudr.html","id":"the-2-invisible-tables","dir":"Articles","previous_headings":"Getting Started","what":"The 2 Invisible Tables","title":"crudr","text":"However, 2 tables cdr_manage_db_tbls() returns invisibly. pick functions cdr_deliver_admin_tbl() & cdr_deliver_chg_log_tbl(). tables functions return like direct output table. Rather, tables direct representations ’s database.","code":""},{"path":"https://eauleaf.github.io/crudr/articles/crudr.html","id":"cdr_deliver_admin_tbl","dir":"Articles","previous_headings":"Getting Started > The 2 Invisible Tables","what":"3) cdr_deliver_admin_tbl()","title":"crudr","text":"function picks invisible administrator table already rendered DT object. table primary database table wrote test database ran cdr_make_db_tbls(), test case, cdr_deliver_admin_tbl('iris') deliver ‘iris’ data data curator. , whoever maintains primary dataset access admin table, person can make changes data held database via output Shiny. function gets called UI portion Shiny. full example section named CRUDR Example.","code":""},{"path":"https://eauleaf.github.io/crudr/articles/crudr.html","id":"cdr_deliver_chg_log_tbl","dir":"Articles","previous_headings":"Getting Started > The 2 Invisible Tables","what":"4) cdr_deliver_chg_log_tbl()","title":"crudr","text":"function picks invisible history--changes table already rendered DT object. table ‘*_DELTAS’ database table wrote test database ran cdr_make_db_tbls(), test case, cdr_deliver_chg_log_tbl('iris') deliver change history changes data curators made table ‘iris’. , every change someone makes primary dataset gets recorded admin table. don’t need much table. ’s just record administrator database table, made change. function gets called UI portion Shiny. full example section named CRUDR Example. table empty right now, let’s change . Let’s launch Shiny app.","code":""},{"path":[]},{"path":"https://eauleaf.github.io/crudr/articles/crudr.html","id":"a-tiny-shiny-app","dir":"Articles","previous_headings":"","what":"A Tiny Shiny App","title":"crudr","text":"manage database tables, now let’s launch bare-bones shiny app. ’ll need ‘crudr’ functions described . stuff comes packages shiny, shinydashboard, DT. ’s code app. Copy RStudio console run .","code":""},{"path":"https://eauleaf.github.io/crudr/articles/crudr.html","id":"crudr-example","dir":"Articles","previous_headings":"A Tiny Shiny App","what":"CRUDR Example","title":"crudr","text":"","code":"con <- pool::dbPool(DBI::dbConnect(RSQLite::SQLite(), 'test.db'))  crudr::cdr_make_db_tbls(con, iris)  header <- shinydashboard::dashboardHeader(title = 'Tiny CRUDR Example')  sidebar <- shinydashboard::dashboardSidebar(   shinydashboard::sidebarMenu(     id = 'tabs',     shinydashboard::menuItem(       text = \"Iris Data\",       startExpanded = TRUE,       shinydashboard::menuSubItem(\"Administrator Table\", tabName = \"datr_editable\", icon = shiny::icon('edit')),       shinydashboard::menuSubItem(\"Change Log\", tabName = \"datr_change_log\"),       shinydashboard::menuSubItem(\"Iris End User View\", tabName = \"datr_end_usr\")     )))  body <- shinydashboard::dashboardBody(   shinydashboard::tabItems(     shinydashboard::tabItem(tabName = \"datr_editable\", crudr::cdr_deliver_admin_tbl('iris')),     shinydashboard::tabItem(tabName = \"datr_change_log\", crudr::cdr_deliver_chg_log_tbl('iris')),     shinydashboard::tabItem(tabName = \"datr_end_usr\", DT::DTOutput('iris_db_data'))   ))  ui <- shinydashboard::dashboardPage(header, sidebar, body)    server <- function(input, output, session){     iris_r_tbl <- crudr::cdr_manage_db_tbls(    db_tbl_name = 'iris',     key_col = 'UID',     conn_pool = con,     session = session,     add_row_permission = T,     del_row_permission = T,     cell_edit_permission = T,     lock_fields = c()   )    output$iris_db_data <- DT::renderDT(     DT::formatDate(table   = DT::datatable(iris_r_tbl()),                    columns = c('WHEN_EDITED_LAST'),                    method  = 'toLocaleString')   )   }   shiny::shinyApp(ui, server)"},{"path":[]},{"path":"https://eauleaf.github.io/crudr/articles/crudr.html","id":"make-some-changes","dir":"Articles","previous_headings":"","what":"Make Some Changes","title":"crudr","text":"app , ’re admin. , go ahead make changes administrator table. Double-click cell change data. app write change database, update change log table data, writes change log data database, wait next change. ‘Iris End User View’ corresponds iris_r_tbl() output server. Make user output awesome, like maybe add download button output view dropping datatable code: ’s pretty much . Close app. reopen running app code . app load data database changes made data .","code":"DT::datatable(iris_r_tbl(),                extensions = 'Buttons',                options = list(dom = 'tB', buttons = c('copy', 'csv', 'excel','pdf')))"},{"path":"https://eauleaf.github.io/crudr/articles/crudr.html","id":"user-control-changes","dir":"Articles","previous_headings":"Make Some Changes","what":"User Control Changes","title":"crudr","text":"want set admin permissions specific people, can shiny server something like: pass ‘okay_to_change cdr_manage_db_tbls() permission argument(s). makes admin table just another table typical user opens , get change like long ’re user called ’.name’.","code":"user <- ifelse(is.null(session$user), Sys.info()[['user']], session$user)  if (user == 'your.name'){   okay_to_change = T } else {   okay_to_change = F }"},{"path":"https://eauleaf.github.io/crudr/articles/crudr.html","id":"other-useful-info","dir":"Articles","previous_headings":"Make Some Changes","what":"Other Useful Info","title":"crudr","text":"Postgres database connection, use RPostgreSQL::PostgreSQL() driver, since ’s tested crudr . Example Postgres connection . close database connection, run: pool::poolClose(con)","code":"con = pool::dbPool(            DBI::dbConnect( RPostgreSQL::PostgreSQL(),                            dbname = \"test\",                            host = \"localhost\",                            port = \"5432\",                            user = your_dsn_uid,                            password = your_dsn_pwd                            ))"},{"path":"https://eauleaf.github.io/crudr/articles/crudr.html","id":"future-improvements","dir":"Articles","previous_headings":"Make Some Changes","what":"Future Improvements","title":"crudr","text":"quite things need make better. Maybe ’ll get sometime. Depends whether anyone uses app. Support databases, like sqlserver, oracle, etc. (don’t think ’d hard, just need test connection. anyone knows make free test connection another database haven’t yet supported, let know.) 2 admin users making concurrent changes, update just specific elements person changed rather refreshing entire tables. point create function, cdr_reconstruct_tbl_as_of(date = Sys.Date - 1, ignore_fields = c()), hand date datetime function function returns tibble database particular point time. Figure push data database asynchronously user never wait data trips database. Figure write automatic tests functions, write bunch tests. Figure package exports ’m exporting every single function. Interact someone knows simplify code, make readable.","code":""},{"path":"https://eauleaf.github.io/crudr/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"eau leaf. Author, maintainer.","code":""},{"path":"https://eauleaf.github.io/crudr/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"leaf e (2023). crudr: Simplifies CRUD tasks including tracking changes db table. R package version 0.0.1.21, https://eauleaf.github.io/crudr/.","code":"@Manual{,   title = {crudr: Simplifies CRUD tasks including tracking changes of a db table},   author = {eau leaf},   year = {2023},   note = {R package version 0.0.1.21},   url = {https://eauleaf.github.io/crudr/}, }"},{"path":"https://eauleaf.github.io/crudr/index.html","id":"crudr","dir":"","previous_headings":"","what":"Simplifies CRUD tasks including tracking changes of a db table","title":"Simplifies CRUD tasks including tracking changes of a db table","text":"goal crudr simplify crud app works Shiny DT, maintains corresponding change tracking table within database. crudr just one function: cdr_manage_db_tbls()","code":""},{"path":"https://eauleaf.github.io/crudr/index.html","id":"try-it-out","dir":"","previous_headings":"","what":"Try it out","title":"Simplifies CRUD tasks including tracking changes of a db table","text":"crudr still development available CRAN yet, works pretty well databases: sqlite, postgres, snowflake. can install development version crudr Github running:","code":"remotes::install_github(\"eauleaf/crudr\")"},{"path":"https://eauleaf.github.io/crudr/reference/cdr_adj_timezone.html","id":null,"dir":"Reference","previous_headings":"","what":"adjust for timezone treatment between databases — cdr_adj_timezone","title":"adjust for timezone treatment between databases — cdr_adj_timezone","text":"adjust timezone treatment databases","code":""},{"path":"https://eauleaf.github.io/crudr/reference/cdr_adj_timezone.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"adjust for timezone treatment between databases — cdr_adj_timezone","text":"","code":"cdr_adj_timezone(conn_pool)"},{"path":"https://eauleaf.github.io/crudr/reference/cdr_adj_timezone.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"adjust for timezone treatment between databases — cdr_adj_timezone","text":"conn_pool database connection type pool","code":""},{"path":"https://eauleaf.github.io/crudr/reference/cdr_adj_timezone.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"adjust for timezone treatment between databases — cdr_adj_timezone","text":"'UTC' empty string","code":""},{"path":"https://eauleaf.github.io/crudr/reference/cdr_adj_timezone.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"adjust for timezone treatment between databases — cdr_adj_timezone","text":"","code":"if (FALSE)  cdr_adj_timezone(conn_pool)"},{"path":"https://eauleaf.github.io/crudr/reference/cdr_admin_key_ui.html","id":null,"dir":"Reference","previous_headings":"","what":"UI module interface button for row additions and/or row deletions in server module table — cdr_admin_key_ui","title":"UI module interface button for row additions and/or row deletions in server module table — cdr_admin_key_ui","text":"User interface portion server module Unique ID input textbox button button UI shows primary table cell_edit_permission set T server","code":""},{"path":"https://eauleaf.github.io/crudr/reference/cdr_admin_key_ui.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"UI module interface button for row additions and/or row deletions in server module table — cdr_admin_key_ui","text":"","code":"cdr_admin_key_ui(id)"},{"path":"https://eauleaf.github.io/crudr/reference/cdr_admin_key_ui.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"UI module interface button for row additions and/or row deletions in server module table — cdr_admin_key_ui","text":"id table name - namespace ID corresponding 'primary_tbl_name' database","code":""},{"path":"https://eauleaf.github.io/crudr/reference/cdr_admin_key_ui.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"UI module interface button for row additions and/or row deletions in server module table — cdr_admin_key_ui","text":"html (called shiny app )","code":""},{"path":"https://eauleaf.github.io/crudr/reference/cdr_admin_key_ui.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"UI module interface button for row additions and/or row deletions in server module table — cdr_admin_key_ui","text":"","code":"if (FALSE) { ui <- shiny::fluidPage(crudr::cdr_admin_key_ui('primary_table_name')) }"},{"path":"https://eauleaf.github.io/crudr/reference/cdr_admin_tbl_ui.html","id":null,"dir":"Reference","previous_headings":"","what":"UI module to output a DT from the Server module — cdr_admin_tbl_ui","title":"UI module to output a DT from the Server module — cdr_admin_tbl_ui","text":"User interface portion crudr module. Presents ajax datatable shiny UI. Just DT output wrapped namespace","code":""},{"path":"https://eauleaf.github.io/crudr/reference/cdr_admin_tbl_ui.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"UI module to output a DT from the Server module — cdr_admin_tbl_ui","text":"","code":"cdr_admin_tbl_ui(id, tbl = \"db_tbl\")"},{"path":"https://eauleaf.github.io/crudr/reference/cdr_admin_tbl_ui.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"UI module to output a DT from the Server module — cdr_admin_tbl_ui","text":"id primary table name - namespace ID matches table name primary table administered database tbl one 'db_tbl' 'chg_log_tbl' depending table server module want present","code":""},{"path":"https://eauleaf.github.io/crudr/reference/cdr_admin_tbl_ui.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"UI module to output a DT from the Server module — cdr_admin_tbl_ui","text":"DTOutput table loading spinner","code":""},{"path":"https://eauleaf.github.io/crudr/reference/cdr_admin_tbl_ui.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"UI module to output a DT from the Server module — cdr_admin_tbl_ui","text":"","code":"if (FALSE) { ui <- fluidPage(crudr::cdr_manage_db_tbls('iris')) }"},{"path":"https://eauleaf.github.io/crudr/reference/cdr_append_tbl.html","id":null,"dir":"Reference","previous_headings":"","what":"Appends data from a dataframe into an existing database table with the same structure — cdr_append_tbl","title":"Appends data from a dataframe into an existing database table with the same structure — cdr_append_tbl","text":"Appends data dataframe existing database table structure","code":""},{"path":"https://eauleaf.github.io/crudr/reference/cdr_append_tbl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Appends data from a dataframe into an existing database table with the same structure — cdr_append_tbl","text":"","code":"cdr_append_tbl(conn_pool, db_tbl, db_tbl_name = NULL, chunk_size = 10000)"},{"path":"https://eauleaf.github.io/crudr/reference/cdr_append_tbl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Appends data from a dataframe into an existing database table with the same structure — cdr_append_tbl","text":"conn_pool database connection class 'pool' db_tbl dataframe append database table db_tbl_name name database table different name dataframe passed 'db_tbl' chunk_size maximum number elements want pass db one go (.e. huge dataframe 100 columns 100,000 rows, chunk_size 10,000 elements split dataframe 1000 groups appends successively.)","code":""},{"path":"https://eauleaf.github.io/crudr/reference/cdr_append_tbl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Appends data from a dataframe into an existing database table with the same structure — cdr_append_tbl","text":"","code":"if (FALSE) { con <- pool::dbPool(DBI::dbConnect(RSQLite::SQLite(), 'test.db')) iris_tbl <- dplyr::mutate(iris, bool = Species == 'setosa', day = Sys.Date(), test = Sys.time()) pool::dbCreateTable(con,  'iris_tbl', iris_tbl) crudr::cdr_append_tbl(con, iris_tbl) dplyr::tbl(con, 'iris_tbl') pool::dbRemoveTable(con,'iris_tbl') pool::poolClose(con) }"},{"path":"https://eauleaf.github.io/crudr/reference/cdr_chk_uniq_id.html","id":null,"dir":"Reference","previous_headings":"","what":"Checks availability of unique ID in DB — cdr_chk_uniq_id","title":"Checks availability of unique ID in DB — cdr_chk_uniq_id","text":"user create delete new row observation, ID unique ID column must already used. Function checks user requested unique ID already DB.","code":""},{"path":"https://eauleaf.github.io/crudr/reference/cdr_chk_uniq_id.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Checks availability of unique ID in DB — cdr_chk_uniq_id","text":"","code":"cdr_chk_uniq_id(db_tbl, input_uid, key_column, chk_for = c(\"create\", \"delete\"))"},{"path":"https://eauleaf.github.io/crudr/reference/cdr_chk_uniq_id.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Checks availability of unique ID in DB — cdr_chk_uniq_id","text":"db_tbl tibble object: primary table server memory input_uid char string: unique ID like add/remove observation creating/deleting key_column char string: describes column field UID chk_for one 'create' 'delete': describing whether user wants make new UID delete row denoted UID. Create checking slightly restrictive capital insensitive.","code":""},{"path":"https://eauleaf.github.io/crudr/reference/cdr_chk_uniq_id.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Checks availability of unique ID in DB — cdr_chk_uniq_id","text":"text display UI","code":""},{"path":"https://eauleaf.github.io/crudr/reference/cdr_coerce_value.html","id":null,"dir":"Reference","previous_headings":"","what":"change cell value using DT::coerceValue — cdr_coerce_value","title":"change cell value using DT::coerceValue — cdr_coerce_value","text":"change cell value using DT::coerceValue","code":""},{"path":"https://eauleaf.github.io/crudr/reference/cdr_coerce_value.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"change cell value using DT::coerceValue — cdr_coerce_value","text":"","code":"cdr_coerce_value(input_val, old_mem_val)"},{"path":"https://eauleaf.github.io/crudr/reference/cdr_coerce_value.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"change cell value using DT::coerceValue — cdr_coerce_value","text":"input_val cell_edit value old_mem_val type database table","code":""},{"path":"https://eauleaf.github.io/crudr/reference/cdr_coerce_value.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"change cell value using DT::coerceValue — cdr_coerce_value","text":"input_val value coerced correct df_tbl value","code":""},{"path":"https://eauleaf.github.io/crudr/reference/cdr_coerce_value.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"change cell value using DT::coerceValue — cdr_coerce_value","text":"","code":"if (FALSE) { crudr::cdr_coerce_value(c('2023-03-17', '2023-03-17T14:28:24Z'), lubridate::now()) input_val <- c('true','t','truthy','tri',1,0,5,-5,'false','bla bla bla','a',' ','', 'na','none','no', 'yes', 'off', 'on', 'no', 'f','F','T', 'NO') purrr::set_names(purrr::map(input_val, ~crudr::cdr_coerce_value(., TRUE)), input_val) }"},{"path":"https://eauleaf.github.io/crudr/reference/cdr_create_row_in_db.html","id":null,"dir":"Reference","previous_headings":"","what":"Appends new row to primary table — cdr_create_row_in_db","title":"Appends new row to primary table — cdr_create_row_in_db","text":"create new observation line primary production database table insert unique ID unique observation identifier line Note: function primary table. used deltas table. Note2: Function clean control 'new_uid' inputs. Run cleaning code passing 'new_uid'","code":""},{"path":"https://eauleaf.github.io/crudr/reference/cdr_create_row_in_db.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Appends new row to primary table — cdr_create_row_in_db","text":"","code":"cdr_create_row_in_db(conn_pool, db_tbl_name, key_col, input_uid)"},{"path":"https://eauleaf.github.io/crudr/reference/cdr_create_row_in_db.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Appends new row to primary table — cdr_create_row_in_db","text":"conn_pool pool object pool connections specific db db_tbl_name char string describing specific table new line located key_col name unique ID column db table (table must unique ID column unique IDs) input_uid char string: new unique ID like use new observation creating","code":""},{"path":"https://eauleaf.github.io/crudr/reference/cdr_delete_row_in_db.html","id":null,"dir":"Reference","previous_headings":"","what":"Removes specified row from db table — cdr_delete_row_in_db","title":"Removes specified row from db table — cdr_delete_row_in_db","text":"Deletes row rows specifying unique ids rows delete Note: implemented UI button, administrator use","code":""},{"path":"https://eauleaf.github.io/crudr/reference/cdr_delete_row_in_db.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Removes specified row from db table — cdr_delete_row_in_db","text":"","code":"cdr_delete_row_in_db(   conn_pool = conn_pool,   db_tbl_name = NULL,   value_rowuid = NULL,   key_column = NULL )"},{"path":"https://eauleaf.github.io/crudr/reference/cdr_delete_row_in_db.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Removes specified row from db table — cdr_delete_row_in_db","text":"conn_pool pool connection object: pool connections established session db_tbl_name string: name specific table value update located value_rowuid number string: specific unique ID corresponds row delete key_column string: name column unique ID","code":""},{"path":"https://eauleaf.github.io/crudr/reference/cdr_delete_row_in_db.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Removes specified row from db table — cdr_delete_row_in_db","text":"TRUE successful deletion","code":""},{"path":"https://eauleaf.github.io/crudr/reference/cdr_delete_row_in_db.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Removes specified row from db table — cdr_delete_row_in_db","text":"","code":"if (FALSE) { con <- pool::dbPool(DBI::dbConnect(RSQLite::SQLite(), 'iris.db')) iris <- dplyr::mutate(iris, unique_id = paste0('uid_',dplyr::row_number())) crudr::cdr_make_db_tbls(conn_pool = con, db_tbl = iris) print(here::here('iris.db')) crudr::cdr_delete_row_in_db(   conn_pool = con,   db_tbl_name = 'iris', #'iris_deltas'   value_rowuid = 'uid_1',   key_column = 'unique_id'   ) pool::poolClose(con) }"},{"path":"https://eauleaf.github.io/crudr/reference/cdr_deliver_admin_tbl.html","id":null,"dir":"Reference","previous_headings":"","what":"gets the administrator table for the Shiny UI — cdr_deliver_admin_tbl","title":"gets the administrator table for the Shiny UI — cdr_deliver_admin_tbl","text":"gets administrator table Shiny UI","code":""},{"path":"https://eauleaf.github.io/crudr/reference/cdr_deliver_admin_tbl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"gets the administrator table for the Shiny UI — cdr_deliver_admin_tbl","text":"","code":"cdr_deliver_admin_tbl(db_tbl_name = \"\")"},{"path":"https://eauleaf.github.io/crudr/reference/cdr_deliver_admin_tbl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"gets the administrator table for the Shiny UI — cdr_deliver_admin_tbl","text":"db_tbl_name string: name primary database table managed","code":""},{"path":"https://eauleaf.github.io/crudr/reference/cdr_deliver_admin_tbl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"gets the administrator table for the Shiny UI — cdr_deliver_admin_tbl","text":"rendered Datatable interface","code":""},{"path":"https://eauleaf.github.io/crudr/reference/cdr_deliver_admin_tbl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"gets the administrator table for the Shiny UI — cdr_deliver_admin_tbl","text":"","code":"if (FALSE)  crudr::cdr_deliver_admin_tbl('iris')"},{"path":"https://eauleaf.github.io/crudr/reference/cdr_deliver_chg_log_tbl.html","id":null,"dir":"Reference","previous_headings":"","what":"gets the change history table for the Shiny UI — cdr_deliver_chg_log_tbl","title":"gets the change history table for the Shiny UI — cdr_deliver_chg_log_tbl","text":"gets change history table Shiny UI","code":""},{"path":"https://eauleaf.github.io/crudr/reference/cdr_deliver_chg_log_tbl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"gets the change history table for the Shiny UI — cdr_deliver_chg_log_tbl","text":"","code":"cdr_deliver_chg_log_tbl(db_tbl_name = \"\")"},{"path":"https://eauleaf.github.io/crudr/reference/cdr_deliver_chg_log_tbl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"gets the change history table for the Shiny UI — cdr_deliver_chg_log_tbl","text":"db_tbl_name string: name primary database table managed","code":""},{"path":"https://eauleaf.github.io/crudr/reference/cdr_deliver_chg_log_tbl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"gets the change history table for the Shiny UI — cdr_deliver_chg_log_tbl","text":"rendered Datatable interface","code":""},{"path":"https://eauleaf.github.io/crudr/reference/cdr_deliver_chg_log_tbl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"gets the change history table for the Shiny UI — cdr_deliver_chg_log_tbl","text":"","code":"if (FALSE)  crudr::cdr_deliver_chg_log_tbl('iris')"},{"path":"https://eauleaf.github.io/crudr/reference/cdr_impart_chg_log_tbl.html","id":null,"dir":"Reference","previous_headings":"","what":"Download database change log and sync it to user interface — cdr_impart_chg_log_tbl","title":"Download database change log and sync it to user interface — cdr_impart_chg_log_tbl","text":"Download database change log sync user interface","code":""},{"path":"https://eauleaf.github.io/crudr/reference/cdr_impart_chg_log_tbl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download database change log and sync it to user interface — cdr_impart_chg_log_tbl","text":"","code":"cdr_impart_chg_log_tbl(   conn_pool,   chg_log_tbl_name = crudr::cdr_name_delta_tbl(db_tbl_name) )"},{"path":"https://eauleaf.github.io/crudr/reference/cdr_impart_chg_log_tbl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download database change log and sync it to user interface — cdr_impart_chg_log_tbl","text":"conn_pool pool connection object package 'pool' chg_log_tbl_name string: name database table managing suffix \"_DELTAS\"","code":""},{"path":"https://eauleaf.github.io/crudr/reference/cdr_impart_chg_log_tbl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Download database change log and sync it to user interface — cdr_impart_chg_log_tbl","text":"DT object present change log table","code":""},{"path":"https://eauleaf.github.io/crudr/reference/cdr_impart_chg_log_tbl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Download database change log and sync it to user interface — cdr_impart_chg_log_tbl","text":"","code":"if (FALSE) cdr_impart_primary_tbl(con, 'iris_DELTAS')"},{"path":"https://eauleaf.github.io/crudr/reference/cdr_impart_primary_tbl.html","id":null,"dir":"Reference","previous_headings":"","what":"Download database table and sync it to user interface — cdr_impart_primary_tbl","title":"Download database table and sync it to user interface — cdr_impart_primary_tbl","text":"Download database table sync user interface","code":""},{"path":"https://eauleaf.github.io/crudr/reference/cdr_impart_primary_tbl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download database table and sync it to user interface — cdr_impart_primary_tbl","text":"","code":"cdr_impart_primary_tbl(   conn_pool,   db_tbl_name,   key_col,   cell_edit_permission,   lock_fields = c() )"},{"path":"https://eauleaf.github.io/crudr/reference/cdr_impart_primary_tbl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download database table and sync it to user interface — cdr_impart_primary_tbl","text":"conn_pool pool connection object package 'pool' db_tbl_name string: name database table managing key_col string: field contains unique ID per row cell_edit_permission bool: want allow admin table cells edited lock_fields strings: column names want lock e.g. c('Species','Petal.Width')","code":""},{"path":"https://eauleaf.github.io/crudr/reference/cdr_impart_primary_tbl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Download database table and sync it to user interface — cdr_impart_primary_tbl","text":"DT object present primary table","code":""},{"path":"https://eauleaf.github.io/crudr/reference/cdr_impart_primary_tbl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Download database table and sync it to user interface — cdr_impart_primary_tbl","text":"","code":"if (FALSE) cdr_impart_primary_tbl(con, 'IRIS', 'UID', TRUE, 'Species')"},{"path":"https://eauleaf.github.io/crudr/reference/cdr_join_tbls.html","id":null,"dir":"Reference","previous_headings":"","what":"Join primary and deltas tables — cdr_join_tbls","title":"Join primary and deltas tables — cdr_join_tbls","text":"join data db_tbl recent change values chg_log_tbl tables (attaches recent '' '' form deltas table primary table) function used 'mod_tbl_server' eventReactive","code":""},{"path":"https://eauleaf.github.io/crudr/reference/cdr_join_tbls.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Join primary and deltas tables — cdr_join_tbls","text":"","code":"cdr_join_tbls(db_tbl, chg_log_tbl, key_col)"},{"path":"https://eauleaf.github.io/crudr/reference/cdr_join_tbls.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Join primary and deltas tables — cdr_join_tbls","text":"db_tbl imported primary table chg_log_tbl imported deltas table key_col name unique ID column primary table","code":""},{"path":"https://eauleaf.github.io/crudr/reference/cdr_join_tbls.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Join primary and deltas tables — cdr_join_tbls","text":"joined tables; db_tbl, -information deltas table (function also places individual tables output$ ui presentation)","code":""},{"path":"https://eauleaf.github.io/crudr/reference/cdr_join_tbls.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Join primary and deltas tables — cdr_join_tbls","text":"","code":"if (FALSE) { combine_prim_delt_tbls(db_tbl, chg_log_tbl, key_col) }"},{"path":"https://eauleaf.github.io/crudr/reference/cdr_js_edit_ctrl.html","id":null,"dir":"Reference","previous_headings":"","what":"Allows key use to navigate table and edit cells — cdr_js_edit_ctrl","title":"Allows key use to navigate table and edit cells — cdr_js_edit_ctrl","text":"Allows key use navigate table edit cells","code":""},{"path":"https://eauleaf.github.io/crudr/reference/cdr_js_edit_ctrl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Allows key use to navigate table and edit cells — cdr_js_edit_ctrl","text":"","code":"cdr_js_edit_ctrl()"},{"path":"https://eauleaf.github.io/crudr/reference/cdr_js_edit_ctrl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Allows key use to navigate table and edit cells — cdr_js_edit_ctrl","text":"javascript callback DT::datatable()","code":""},{"path":"https://eauleaf.github.io/crudr/reference/cdr_js_edit_ctrl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Allows key use to navigate table and edit cells — cdr_js_edit_ctrl","text":"","code":"crudr::cdr_js_edit_ctrl() #>  #> --Running: crudr::cdr_js_edit_ctrl() #> [1] \"// If you're on a cell and key 'Enter' or 'F2', enter edit mode\\ntable.on('key', function(e, datatable, key, cell){\\nconsole.log(key);\\n  if ( key === 113 || key === 13 ){\\n    $(cell.node()).trigger('dblclick.dt');\\n  }\\n});\\ntable.on('keydown', 'td', function(e){\\nconsole.log(e.which);\\n// If you're editing a cell and press 'Tab, F2, up or down' to enter the new data\\n  if (e.target.localName == 'input' && [9,38,40,113].indexOf(e.keyCode) > -1){\\n    $(e.target).trigger('blur');\\n// If you're editing a cell and press 'left, right, home, or end', perform those jumps within the cell text\\n  } else if (e.target.localName == 'input' && [35,36,37,39].indexOf(e.keyCode) > -1) {\\n    e.stopPropagation();\\n// If you're editing a cell and then press 'escape', remove any User changes\\n  } else if (e.target.localName == 'input' && e.keyCode === 27) {\\n    e.stopPropagation();\\n    var prior_val = table.cell( this ).data();\\n    $(e.target).val( prior_val );\\n    $(e.target).trigger('blur');\\n// If you're editing a cell and press 'enter', mimic the downarrow\\n  } else if (e.target.localName == 'input' && e.keyCode === 13 ) {\\n    e.stopPropagation();\\n    $(e.target).trigger('blur');\\n  }\\n});\" #> attr(,\"class\") #> [1] \"JS_EVAL\""},{"path":"https://eauleaf.github.io/crudr/reference/cdr_make_db_tbls.html","id":null,"dir":"Reference","previous_headings":"","what":"Creates primary and deltas tables in a db — cdr_make_db_tbls","title":"Creates primary and deltas tables in a db — cdr_make_db_tbls","text":"creates initial primary table database specified conn_pool; well corresponding deltas metadata table change tracking","code":""},{"path":"https://eauleaf.github.io/crudr/reference/cdr_make_db_tbls.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Creates primary and deltas tables in a db — cdr_make_db_tbls","text":"","code":"cdr_make_db_tbls(conn_pool, db_tbl, key_field = NULL)"},{"path":"https://eauleaf.github.io/crudr/reference/cdr_make_db_tbls.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Creates primary and deltas tables in a db — cdr_make_db_tbls","text":"conn_pool database connection class 'pool' db_tbl dataframe; primary table place database key_field string: unique ID column name data. Null, creates proxy","code":""},{"path":"https://eauleaf.github.io/crudr/reference/cdr_make_db_tbls.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Creates primary and deltas tables in a db — cdr_make_db_tbls","text":"Note: want remove table, functions can helpful: pool::dbListTables(conn_pool) pool::dbRemoveTable(conn_pool, 'some_table')","code":""},{"path":"https://eauleaf.github.io/crudr/reference/cdr_make_unique_ids.html","id":null,"dir":"Reference","previous_headings":"","what":"Title — cdr_make_unique_ids","title":"Title — cdr_make_unique_ids","text":"Title","code":""},{"path":"https://eauleaf.github.io/crudr/reference/cdr_make_unique_ids.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Title — cdr_make_unique_ids","text":"","code":"cdr_make_unique_ids(db_tbl, key_field = \"UID\")"},{"path":"https://eauleaf.github.io/crudr/reference/cdr_make_unique_ids.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Title — cdr_make_unique_ids","text":"db_tbl dataframe key_field name column Unique ID","code":""},{"path":"https://eauleaf.github.io/crudr/reference/cdr_make_unique_ids.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Title — cdr_make_unique_ids","text":"table column Unique IDs","code":""},{"path":"https://eauleaf.github.io/crudr/reference/cdr_make_unique_ids.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Title — cdr_make_unique_ids","text":"","code":"crudr::cdr_make_unique_ids(utils::head(iris)) #> Auto generating Unique IDs for the table. #> # A tibble: 6 × 6 #>   UID   Sepal.Length Sepal.Width Petal.Length Petal.Width Species #>   <chr>        <dbl>       <dbl>        <dbl>       <dbl> <fct>   #> 1 ID-1           5.1         3.5          1.4         0.2 setosa  #> 2 ID-2           4.9         3            1.4         0.2 setosa  #> 3 ID-3           4.7         3.2          1.3         0.2 setosa  #> 4 ID-4           4.6         3.1          1.5         0.2 setosa  #> 5 ID-5           5           3.6          1.4         0.2 setosa  #> 6 ID-6           5.4         3.9          1.7         0.4 setosa"},{"path":"https://eauleaf.github.io/crudr/reference/cdr_manage_db_tbls.html","id":null,"dir":"Reference","previous_headings":"","what":"Server module to present and control a db table — cdr_manage_db_tbls","title":"Server module to present and control a db table — cdr_manage_db_tbls","text":"function server module gets database tables db specified pool connection db table name specified 'db_tbl_name', server module manages syncs changes UI DT, -server-memory tbl, backend db, primary well corresponding deltas table (joined table presented UI)","code":""},{"path":"https://eauleaf.github.io/crudr/reference/cdr_manage_db_tbls.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Server module to present and control a db table — cdr_manage_db_tbls","text":"","code":"cdr_manage_db_tbls(   db_tbl_name,   key_col,   conn_pool,   session,   add_row_permission = F,   del_row_permission = F,   cell_edit_permission = F,   lock_fields = c(),   multiuser_update_wait = 0 )"},{"path":"https://eauleaf.github.io/crudr/reference/cdr_manage_db_tbls.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Server module to present and control a db table — cdr_manage_db_tbls","text":"db_tbl_name primary table name - namespace ID corresponding 'primary_tbl_name' database key_col name unique ID column db table (table must unique ID column unique IDs) conn_pool db connection package 'pool' session current shiny session add_row_permission T F: allows user add row primary table module del_row_permission T F: allows user delete row primary table module cell_edit_permission T F: make editable primary table module (cell_edit_permission = T means user can change data) (cell_edit_permission = F means user can see data) lock_fields strings: vector field names database lock admin editing multiuser_update_wait numeric: minimum time seconds checking incorporating data changes made users","code":""},{"path":"https://eauleaf.github.io/crudr/reference/cdr_manage_db_tbls.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Server module to present and control a db table — cdr_manage_db_tbls","text":"returns DT reactive tables shiny ui environment","code":""},{"path":"https://eauleaf.github.io/crudr/reference/cdr_manage_db_tbls.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Server module to present and control a db table — cdr_manage_db_tbls","text":"","code":"if (FALSE) { con <- pool::dbPool(DBI::dbConnect(RSQLite::SQLite(), 'iris.db')) crudr::cdr_make_db_tbls(con, iris) server <- function(input, output, session){              r_tbl <- crudr::cdr_manage_db_tbls('iris', 'UID', con, session)              output$iris <- DT::renderDT(r_tbl()) } ui <- shiny::fluidPage(DT::DTOutput('iris')) shiny::shinyApp(ui,server) }"},{"path":"https://eauleaf.github.io/crudr/reference/cdr_name_delta_tbl.html","id":null,"dir":"Reference","previous_headings":"","what":"creates the name of the change tracking table so it's set in one location — cdr_name_delta_tbl","title":"creates the name of the change tracking table so it's set in one location — cdr_name_delta_tbl","text":"creates name change tracking table set one location","code":""},{"path":"https://eauleaf.github.io/crudr/reference/cdr_name_delta_tbl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"creates the name of the change tracking table so it's set in one location — cdr_name_delta_tbl","text":"","code":"cdr_name_delta_tbl(db_tbl_name)"},{"path":"https://eauleaf.github.io/crudr/reference/cdr_name_delta_tbl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"creates the name of the change tracking table so it's set in one location — cdr_name_delta_tbl","text":"db_tbl_name char string: name primary table deltas table track","code":""},{"path":"https://eauleaf.github.io/crudr/reference/cdr_name_delta_tbl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"creates the name of the change tracking table so it's set in one location — cdr_name_delta_tbl","text":"char string: name table track changes primary table","code":""},{"path":"https://eauleaf.github.io/crudr/reference/cdr_name_delta_tbl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"creates the name of the change tracking table so it's set in one location — cdr_name_delta_tbl","text":"","code":"if (FALSE) { crudr::cdr_name_delta_tbl('some_table_name') }"},{"path":"https://eauleaf.github.io/crudr/reference/cdr_remove_tbl.html","id":null,"dir":"Reference","previous_headings":"","what":"removes a specified table by deleting the table or by removing just the table data (truncating) — cdr_remove_tbl","title":"removes a specified table by deleting the table or by removing just the table data (truncating) — cdr_remove_tbl","text":"removes specified table deleting table removing just table data (truncating)","code":""},{"path":"https://eauleaf.github.io/crudr/reference/cdr_remove_tbl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"removes a specified table by deleting the table or by removing just the table data (truncating) — cdr_remove_tbl","text":"","code":"cdr_remove_tbl(   conn_pool,   db_tbl_name = NULL,   removal = c(\"delete\", \"truncate\") )"},{"path":"https://eauleaf.github.io/crudr/reference/cdr_remove_tbl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"removes a specified table by deleting the table or by removing just the table data (truncating) — cdr_remove_tbl","text":"conn_pool pool connection object: pool connections established session db_tbl_name string: name specific table value update located removal string: one 'delete' 'truncate'","code":""},{"path":"https://eauleaf.github.io/crudr/reference/cdr_remove_tbl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"removes a specified table by deleting the table or by removing just the table data (truncating) — cdr_remove_tbl","text":"Boolean describing success","code":""},{"path":"https://eauleaf.github.io/crudr/reference/cdr_remove_tbl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"removes a specified table by deleting the table or by removing just the table data (truncating) — cdr_remove_tbl","text":"","code":"if (FALSE) cdr_remove_tbl(conn_pool = pool_connection, db_tbl_name = iris, removal = 'truncate')"},{"path":"https://eauleaf.github.io/crudr/reference/cdr_reset_db.html","id":null,"dir":"Reference","previous_headings":"","what":"removes the tables written to a db and closes the connection — cdr_reset_db","title":"removes the tables written to a db and closes the connection — cdr_reset_db","text":"generally testing","code":""},{"path":"https://eauleaf.github.io/crudr/reference/cdr_reset_db.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"removes the tables written to a db and closes the connection — cdr_reset_db","text":"","code":"cdr_reset_db(conn_pool, db_tbl_name = NULL)"},{"path":"https://eauleaf.github.io/crudr/reference/cdr_reset_db.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"removes the tables written to a db and closes the connection — cdr_reset_db","text":"conn_pool pool connection object: pool connections established session db_tbl_name string: name specific table value update located ","code":""},{"path":"https://eauleaf.github.io/crudr/reference/cdr_reset_db.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"removes the tables written to a db and closes the connection — cdr_reset_db","text":"","code":"if (FALSE)  reset_db(con, iris)"},{"path":"https://eauleaf.github.io/crudr/reference/cdr_row_editor_html.html","id":null,"dir":"Reference","previous_headings":"","what":"creates the html for the UI to add and delete new rows given the permissions to do so — cdr_row_editor_html","title":"creates the html for the UI to add and delete new rows given the permissions to do so — cdr_row_editor_html","text":"creates html UI add delete new rows given permissions ","code":""},{"path":"https://eauleaf.github.io/crudr/reference/cdr_row_editor_html.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"creates the html for the UI to add and delete new rows given the permissions to do so — cdr_row_editor_html","text":"","code":"cdr_row_editor_html(   notes_txt = \"\",   id,   add_row_permission = F,   del_row_permission = F )"},{"path":"https://eauleaf.github.io/crudr/reference/cdr_row_editor_html.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"creates the html for the UI to add and delete new rows given the permissions to do so — cdr_row_editor_html","text":"notes_txt message send UI edit page id namespace id (corresponds DB name) add_row_permission T F: whether user permission add new observation, .e. Unique ID row del_row_permission T F: whether user permission delete new observation, .e. Unique ID row","code":""},{"path":"https://eauleaf.github.io/crudr/reference/cdr_row_editor_html.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"creates the html for the UI to add and delete new rows given the permissions to do so — cdr_row_editor_html","text":"ui output component","code":""},{"path":"https://eauleaf.github.io/crudr/reference/cdr_row_editor_html.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"creates the html for the UI to add and delete new rows given the permissions to do so — cdr_row_editor_html","text":"","code":"crudr::cdr_row_editor_html('hello', 'iris', TRUE, TRUE) #>  #> --Running: crudr::cdr_row_editor_html() #> <span style=\"display: inline-flex; align-items: center; font-size: 10px;\"> #>   <div class=\"form-group shiny-input-container\" style=\"width:180px;\"> #>     <label class=\"control-label\" id=\"iris-uid-label\" for=\"iris-uid\"><\/label> #>     <input id=\"iris-uid\" type=\"text\" class=\"form-control\" value=\"\" placeholder=\"Enter Unique ID\"/> #>   <\/div> #>   <button id=\"iris-create_row_btn\" type=\"button\" class=\"btn btn-default action-button\" text=\"Create Row\" style=\"margin-left: 15px;\">Create Row<\/button> #>   <button id=\"iris-delete_row_btn\" type=\"button\" class=\"btn btn-default action-button\" text=\"Delete Row\" style=\"margin-left: 15px;\">Delete Row<\/button> #>   <span style=\"color:red; font-size: 130%; margin-left: 15px;\">hello<\/span> #> <\/span>"},{"path":"https://eauleaf.github.io/crudr/reference/cdr_update_db_deltas_tbl.html","id":null,"dir":"Reference","previous_headings":"","what":"Populates deltas table when user updates primary table — cdr_update_db_deltas_tbl","title":"Populates deltas table when user updates primary table — cdr_update_db_deltas_tbl","text":"Connects posts --data change tracking table Function called user updates data primary table","code":""},{"path":"https://eauleaf.github.io/crudr/reference/cdr_update_db_deltas_tbl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Populates deltas table when user updates primary table — cdr_update_db_deltas_tbl","text":"","code":"cdr_update_db_deltas_tbl(conn_pool, db_tbl_name, to_deltas_tbl)"},{"path":"https://eauleaf.github.io/crudr/reference/cdr_update_db_deltas_tbl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Populates deltas table when user updates primary table — cdr_update_db_deltas_tbl","text":"conn_pool pool connection object: pool connections established session db_tbl_name string: name specific table value update located to_deltas_tbl tibble delta values append","code":""},{"path":"https://eauleaf.github.io/crudr/reference/cdr_update_db_deltas_tbl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Populates deltas table when user updates primary table — cdr_update_db_deltas_tbl","text":"-memory copy data just appended tracking table","code":""},{"path":"https://eauleaf.github.io/crudr/reference/cdr_update_db_primary_tbl.html","id":null,"dir":"Reference","previous_headings":"","what":"updates the primary db table by specifying value to change,\ncorresponding db table, unique row ID, and column — cdr_update_db_primary_tbl","title":"updates the primary db table by specifying value to change,\ncorresponding db table, unique row ID, and column — cdr_update_db_primary_tbl","text":"updates primary db table specifying value change, corresponding db table, unique row ID, column","code":""},{"path":"https://eauleaf.github.io/crudr/reference/cdr_update_db_primary_tbl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"updates the primary db table by specifying value to change,\ncorresponding db table, unique row ID, and column — cdr_update_db_primary_tbl","text":"","code":"cdr_update_db_primary_tbl(   conn_pool = conn_pool,   db_tbl_name = NULL,   update_value = NULL,   value_colname = NULL,   value_rowuid = NULL,   key_column = NULL )"},{"path":"https://eauleaf.github.io/crudr/reference/cdr_update_db_primary_tbl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"updates the primary db table by specifying value to change,\ncorresponding db table, unique row ID, and column — cdr_update_db_primary_tbl","text":"conn_pool pool connection object: pool connections established session db_tbl_name string: name specific table value update located update_value number string: value update already correct data type value_colname string: specific column name value update located value_rowuid number string: specific row unique ID corresponds row value update located (key) key_column string: name column unique ID (key column)","code":""},{"path":"https://eauleaf.github.io/crudr/reference/cdr_update_db_primary_tbl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"updates the primary db table by specifying value to change,\ncorresponding db table, unique row ID, and column — cdr_update_db_primary_tbl","text":"TRUE","code":""},{"path":"https://eauleaf.github.io/crudr/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://eauleaf.github.io/crudr/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://eauleaf.github.io/crudr/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"https://eauleaf.github.io/crudr/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling rhs(lhs).","code":""}]
